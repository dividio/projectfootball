/******************************************************************************
* Copyright (C) 2008 - Ikaro Games   www.ikarogames.com                       *
*                                                                             *
* This program is free software; you can redistribute it and/or               *
* modify it under the terms of the GNU General Public License                 *
* as published by the Free Software Foundation; either version 2              *
* of the License, or (at your option) any later version.                      *
*                                                                             *
* This program is distributed in the hope that it will be useful,             *
* but WITHOUT ANY WARRANTY; without even the implied warranty of              *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
* GNU General Public License for more details.                                *
*                                                                             *
* You should have received a copy of the GNU General Public License           *
* along with this program; if not, write to the Free Software                 *
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. *
*                                                                             *
*                                                                             *
*       generated by dia/DAOcodegen.py                                        *
*       Version: 1.11                                                          *
******************************************************************************/

#include <stdlib.h>

#include "CPfGamesDAOSQLiteEntity.h"
#include "../../../../../utils/CLog.h"

CPfGamesDAOSQLiteEntity::CPfGamesDAOSQLiteEntity(sqlite3 *database)
{
    m_database = database;
}

CPfGamesDAOSQLiteEntity::~CPfGamesDAOSQLiteEntity()
{
}

bool CPfGamesDAOSQLiteEntity::deleteReg(CPfGames *reg)
{
    std::string sql("DELETE FROM PF_GAMES WHERE X_GAME=");
    sql = sql+"'"+reg->getXGame_str()+"'";
    return exec(sql);
}

bool CPfGamesDAOSQLiteEntity::insertReg(CPfGames *reg)
{
    std::string sql("INSERT INTO PF_GAMES (X_FK_USER,S_DRIVER_NAME,S_GAME_NAME,S_CONNECTION_STRING,D_LAST_SAVED) VALUES (");
    sql = sql+" '"+reg->getXFkUser_str()+"'";
    sql = sql+",'"+reg->getSDriverName_str()+"'";
    sql = sql+",'"+reg->getSGameName_str()+"'";
    sql = sql+",'"+reg->getSConnectionString_str()+"'";
    sql = sql+",'"+reg->getDLastSaved_str()+"'";
    sql = sql+")";
    return exec(sql);
}

bool CPfGamesDAOSQLiteEntity::updateReg(CPfGames *reg)
{
    std::string sql("UPDATE PF_GAMES SET ");
    sql = sql+" X_FK_USER='"+reg->getXFkUser_str()+"'";
    sql = sql+",S_DRIVER_NAME='"+reg->getSDriverName_str()+"'";
    sql = sql+",S_GAME_NAME='"+reg->getSGameName_str()+"'";
    sql = sql+",S_CONNECTION_STRING='"+reg->getSConnectionString_str()+"'";
    sql = sql+",X_GAME='"+reg->getXGame_str()+"'";
    sql = sql+",D_LAST_SAVED='"+reg->getDLastSaved_str()+"'";
    sql = sql+" WHERE X_GAME='"+reg->getXGame_str()+"'";
    return exec(sql);
}

void CPfGamesDAOSQLiteEntity::freeVector(std::vector<CPfGames*>* vector )
{
    std::vector<CPfGames*>::iterator it;
    for( it=vector->begin(); it!=vector->end(); it++ ){
        delete (*it);
        (*it) = NULL;
    }
    delete vector;
}

CPfGames* CPfGamesDAOSQLiteEntity::loadRegister(std::string sql)
{
    char *msgError = NULL;
    CPfGames *destiny = new CPfGames();
    if( sqlite3_exec(m_database, sql.c_str(), callbackRegister, destiny, &msgError)!=SQLITE_OK ){
        CLog::getInstance()->error("Error in SQL: \"%s\" --> \"%s\"", sql.c_str(), msgError);
        sqlite3_free(msgError);
    }
    return destiny;
}

std::vector<CPfGames*> * CPfGamesDAOSQLiteEntity::loadVector(std::string sql)
{
    char *msgError = NULL;
    std::vector<CPfGames*> *container = new std::vector<CPfGames*>;
    if( sqlite3_exec(m_database, sql.c_str(), callbackVector, container, &msgError)!=SQLITE_OK ){
        CLog::getInstance()->error("Error in SQL: \"%s\" --> \"%s\"", sql.c_str(), msgError);
        sqlite3_free(msgError);
    }
    return container;
}

bool CPfGamesDAOSQLiteEntity::exec(std::string sql)
{
    char *msgError = NULL;
    bool correct = true;
    if( sqlite3_exec(m_database, sql.c_str(), NULL, NULL, &msgError)!=SQLITE_OK ){
        CLog::getInstance()->error("Error in SQL: \"%s\" --> \"%s\"", sql.c_str(), msgError);
        sqlite3_free(msgError);
        correct = false;
    }
    return correct;
}

int CPfGamesDAOSQLiteEntity::callbackRegister(void *object, int nColumns, char **vColumn, char **sColumn)
{
    int error = 1;
    if( object!=NULL ){
        CPfGames *destiny = (CPfGames*)object;
        for( int i=0; i<nColumns; i++ ){
            if( strcmp(sColumn[i], "X_FK_USER")==0 ){
                destiny->setXFkUser(vColumn[i]);
            }else if( strcmp(sColumn[i], "S_DRIVER_NAME")==0 ){
                destiny->setSDriverName(vColumn[i]);
            }else if( strcmp(sColumn[i], "S_GAME_NAME")==0 ){
                destiny->setSGameName(vColumn[i]);
            }else if( strcmp(sColumn[i], "S_CONNECTION_STRING")==0 ){
                destiny->setSConnectionString(vColumn[i]);
            }else if( strcmp(sColumn[i], "X_GAME")==0 ){
                destiny->setXGame(vColumn[i]);
            }else if( strcmp(sColumn[i], "D_LAST_SAVED")==0 ){
                destiny->setDLastSaved(vColumn[i]);
            }
        }
        error = 0; // All OK
    }
    return error;
}

int CPfGamesDAOSQLiteEntity::callbackVector(void *object, int nColumns, char **vColumn, char **sColumn)
{
    if( object!=NULL ){
        std::vector<CPfGames*> *container = (std::vector<CPfGames*> *)object;
        CPfGames *destiny = new CPfGames();
        for( int i=0; i<nColumns; i++ ){
            if( strcmp(sColumn[i], "X_FK_USER")==0 ){
                destiny->setXFkUser(vColumn[i]);
            }else if( strcmp(sColumn[i], "S_DRIVER_NAME")==0 ){
                destiny->setSDriverName(vColumn[i]);
            }else if( strcmp(sColumn[i], "S_GAME_NAME")==0 ){
                destiny->setSGameName(vColumn[i]);
            }else if( strcmp(sColumn[i], "S_CONNECTION_STRING")==0 ){
                destiny->setSConnectionString(vColumn[i]);
            }else if( strcmp(sColumn[i], "X_GAME")==0 ){
                destiny->setXGame(vColumn[i]);
            }else if( strcmp(sColumn[i], "D_LAST_SAVED")==0 ){
                destiny->setDLastSaved(vColumn[i]);
            }
        }
        container->push_back(destiny);
    }
    return 0; // All OK
}

