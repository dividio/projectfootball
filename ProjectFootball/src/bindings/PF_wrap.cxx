/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <malloc.h>
#include <assert.h>	/* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char         *name;
  swig_type_info   **type;
  lua_CFunction       constructor;
  void              (*destructor)(void *);
  swig_lua_method        *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int               own;	/* 1 if owned & must be destroyed */
  void             *ptr;
} swig_lua_userdata;

/* this is the struct for wrappering arbitary packed binary data
(currently it is only used for member fn pointers)
the data ordering is similar to swig_lua_userdata, but its currently not possible
to tell the two structres apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int               own;	/* 1 if owned & must be destroyed */
  char data[1];            /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)            SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)	       SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)            SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)                SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(I) {lua_pushfstring(L,"argument %d incorrect/missing",I);goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
	{lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",\
	func_name,(type && type->str)?type->str:"void*",argnum);\
	goto fail;}

#define SWIG_Lua_get_table(L,n) \
	(lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
		   (lua_pushstring(L, n), \
			lua_pushcfunction(L, f), \
			lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	printf("SWIG_Lua_module_get %p(%s) '%s'\n",
				lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
				lua_tostring(L,2));
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get");	/* get the .get table */
	lua_remove(L,3);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .get table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,3);	/* remove .get */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_call(L,0,1);
			return 1;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .get */
	lua_pushnil(L);	/* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
*/
	/* get the metatable */
	assert(lua_istable(L,1));	/* just in case */
	lua_getmetatable(L,1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".set");	/* get the .set table */
	lua_remove(L,4);	/* remove metatable */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		lua_remove(L,4);	/* remove .set */
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,1,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the top */
	}
	lua_pop(L,1);	/* remove the .set */
    return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushstring(L,name);
	lua_newtable(L);				/* the table */
	/* add meta table */
	lua_newtable(L);		/* the meta table */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
	lua_pushstring(L,".get");
	lua_newtable(L);		/* the .get table */
	lua_rawset(L,-3);       /* add .get into metatable */
	lua_pushstring(L,".set");
	lua_newtable(L);		/* the .set table */
	lua_rawset(L,-3);       /* add .set into metatable */
	lua_setmetatable(L,-2);	/* sets meta table in module */
	lua_rawset(L,-3);                  /* add module into parent */
	SWIG_Lua_get_table(L,name);				/* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
	lua_pop(L,1);                      /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	lua_getmetatable(L,-1);	/* get the metatable */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* should be a table: */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)	/* if there is a set fn */
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* should be a table: */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
	lua_pop(L,1);                      /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
	SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*	there should be 2 params passed in
	(1) userdata (not the meta table)
	(2) string name of the attribute
*/
	assert(lua_isuserdata(L,-2));	/* just in case */
	lua_getmetatable(L,-2);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	/* look for the key in the .get table */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);
	lua_remove(L,-2); /* stack tidy, remove .get table */
	if (lua_iscfunction(L,-1))
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_call(L,1,1);	/* 1 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* ok, so try the .fn table */
	SWIG_Lua_get_table(L,".fn"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	lua_pushvalue(L,2);  /* key */
	lua_rawget(L,-2);	/* look for the fn */
	lua_remove(L,-2); /* stack tidy, remove .fn table */
	if (lua_iscfunction(L,-1))
	{	/* found it so return the fn & let lua call it */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	lua_pop(L,1);	/* remove whatever was there */
	/* NEW: looks for the __getitem() fn
	this is a user provided get fn */
	SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_call(L,2,1);	/* 2 value in (userdata),1 out (result) */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;	/* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*	there should be 3 params passed in
	(1) table (not the meta table)
	(2) string name of the attribute
	(3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
			lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
			lua_tostring(L,2),
			lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

	assert(lua_isuserdata(L,1));	/* just in case */
	lua_getmetatable(L,1);		/* get the meta table */
	assert(lua_istable(L,-1));	/* just in case */

	SWIG_Lua_get_table(L,".set"); /* find the .set table */
	if (lua_istable(L,-1))
	{
		/* look for the key in the .set table */
		lua_pushvalue(L,2);  /* key */
		lua_rawget(L,-2);
		if (lua_iscfunction(L,-1))
		{	/* found it so call the fn & return its value */
			lua_pushvalue(L,1);  /* userdata */
			lua_pushvalue(L,3);  /* value */
			lua_call(L,2,0);
			return 0;
		}
		lua_pop(L,1);	/* remove the value */
	}
	lua_pop(L,1);	/* remove the value .set table */
	/* NEW: looks for the __setitem() fn
	this is a user provided set fn */
	SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
	if (lua_iscfunction(L,-1))	/* if its there */
	{	/* found it so call the fn & return its value */
		lua_pushvalue(L,1);  /* the userdata */
		lua_pushvalue(L,2);  /* the parameter */
		lua_pushvalue(L,3);  /* the value */
		lua_call(L,3,0);	/* 3 values in ,0 out */
		lua_remove(L,-2); /* stack tidy, remove metatable */
		return 1;
	}
	return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*	there should be 1 params passed in
	(1) userdata (not the meta table) */
	swig_lua_userdata* usr;
	swig_lua_class* clss;
	assert(lua_isuserdata(L,-1));	/* just in case */
	usr=(swig_lua_userdata*)lua_touserdata(L,-1);	/* get it */
	/* if must be destroyed & has a destructor */
	if (usr->own) /* if must be destroyed */
	{
		clss=(swig_lua_class*)usr->type->clientdata;	/* get the class */
		if (clss && clss->destructor)	/* there is a destroy fn */
		{
			clss->destructor(usr->ptr);	/* bye bye */
		}
	}
	return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
	/* add this all into the swig registry: */
	lua_pushstring(L,"SWIG");
	lua_rawget(L,LUA_REGISTRYINDEX);	/* get the registry */
	if (!lua_istable(L,-1))	/* not there */
	{	/* must be first time, so add it */
		lua_pop(L,1);	/* remove the result */
		lua_pushstring(L,"SWIG");
		lua_newtable(L);
		lua_rawset(L,LUA_REGISTRYINDEX);
		/* then get it */
		lua_pushstring(L,"SWIG");
		lua_rawget(L,LUA_REGISTRYINDEX);
	}
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,cname);	/* get the name */
	lua_rawget(L,-2);		/* get it */
	lua_remove(L,-2);		/* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_get_table(L,".get"); /* find the .get table */
	assert(lua_istable(L,-1));	/* just in case */
	SWIG_Lua_add_function(L,name,getFn);
	lua_pop(L,1);                      /* tidy stack (remove table) */
	if (setFn)
	{
		SWIG_Lua_get_table(L,".set"); /* find the .set table */
		assert(lua_istable(L,-1));	/* just in case */
		SWIG_Lua_add_function(L,name,setFn);
		lua_pop(L,1);                      /* tidy stack (remove table) */
	}
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
	int i;
	/* call all the base classes first: we can then override these later: */
	for(i=0;clss->bases[i];i++)
	{
		SWIG_Lua_add_class_details(L,clss->bases[i]);
	}
	/* add fns */
	for(i=0;clss->attributes[i].name;i++){
		SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
	}
	/* add methods to the metatable */
	SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
	assert(lua_istable(L,-1));	/* just in case */
	for(i=0;clss->methods[i].name;i++){
		SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
	}
	lua_pop(L,1);                      /* tidy stack (remove table) */
	/* 	add operator overloads
		these look ANY method which start with "__" and assume they
		are operator overloads & add them to the metatable
		(this might mess up is someone defines a method __gc (the destructor)*/
	for(i=0;clss->methods[i].name;i++){
		if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
			SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
		}
	}
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
/*	add its constructor to module with the name of the class
	so you can do MyClass(...) as well as new_MyClass(...)
	BUT only if a constructor is defined
	(this overcomes the problem of pure virtual classes without constructors)*/
	if (clss->constructor)
		SWIG_Lua_add_function(L,clss->name,clss->constructor);

	SWIG_Lua_get_class_registry(L);	/* get the registry */
	lua_pushstring(L,clss->name);	/* get the name */
	lua_newtable(L);		/* create the metatable */
	/* add string of class name called ".type" */
	lua_pushstring(L,".type");
	lua_pushstring(L,clss->name);
	lua_rawset(L,-3);
	/* add a table called ".get" */
	lua_pushstring(L,".get");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".set" */
	lua_pushstring(L,".set");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add a table called ".fn" */
	lua_pushstring(L,".fn");
	lua_newtable(L);
	lua_rawset(L,-3);
	/* add accessor fns for using the .get,.set&.fn */
	SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
	SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
	SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
	/* add it */
	lua_rawset(L,-3);	/* metatable into registry */
	lua_pop(L,1);           /* tidy stack (remove registry) */

	SWIG_Lua_get_class_metatable(L,clss->name);
	SWIG_Lua_add_class_details(L,clss);	/* recursive adding of details (atts & ops) */
	lua_pop(L,1);           /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
	if (type->clientdata)	/* there is clientdata: so add the metatable */
	{
		SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
		if (lua_istable(L,-1))
		{
			lua_setmetatable(L,-2);
		}
		else
		{
			lua_pop(L,1);
		}
	}
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
	swig_lua_userdata* usr;
	if (!ptr){
		lua_pushnil(L);
		return;
	}
	usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));	/* get data */
	usr->ptr=ptr;	/* set the ptr */
	usr->type=type;
	usr->own=own;
    _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
	swig_lua_userdata* usr;
	swig_cast_info *cast;
	if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
	usr=(swig_lua_userdata*)lua_touserdata(L,index);	/* get data */
	if (usr)
	{
                if (!type)                           /* special cast void*, no casting fn */
                {
                    *ptr=usr->ptr;
                    return SWIG_OK; /* ok */
                }
		cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
		if (cast)
		{
			*ptr=SWIG_TypeCast(cast,usr->ptr);
			return SWIG_OK;	/* ok */
		}
	}
	return SWIG_ERROR;	/* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
						int argnum,const char* func_name){
	void* result;
	if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
		lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
			func_name,(type && type->str)?type->str:"void*",argnum);
		lua_error(L);
	}
	return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
	swig_lua_rawdata* raw;
	assert(ptr); /* not acceptable to pass in a NULL value */
	raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);	/* alloc data */
	raw->type=type;
	raw->own=0;
    memcpy(raw->data,ptr,size); /* copy the data */
    _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
	swig_lua_rawdata* raw;
	swig_cast_info *cast;
	raw=(swig_lua_rawdata*)lua_touserdata(L,index);	/* get data */
	if (!raw) return SWIG_ERROR;	/* error */
    if (type==0 || type==raw->type) /* void* or identical type */
    {
        memcpy(ptr,raw->data,size); /* copy it */
        return SWIG_OK; /* ok */
    }
    return SWIG_ERROR;	/* error */
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
	swig_lua_userdata* usr;
	if (!lua_isuserdata(L,1))	/* just in case */
		return 0;	/* nil reply */
	usr=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	lua_pushstring(L,usr->type->name);
	return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
	int result;
	swig_lua_userdata *usr1,*usr2;
	if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))	/* just in case */
		return 0;	/* nil reply */
	usr1=(swig_lua_userdata*)lua_touserdata(L,1);	/* get data */
	usr2=(swig_lua_userdata*)lua_touserdata(L,2);	/* get data */
	/*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
	result=(usr1->ptr==usr2->ptr);
        lua_pushboolean(L,result);
	return 1;
}


/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
    /* TODO?? */
/*      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype)); */
      break;
    default:
      break;
    }
  }
}

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
  	ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);	/* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CDAOAbstractFactory swig_types[0]
#define SWIGTYPE_p_CDate swig_types[1]
#define SWIGTYPE_p_CLog swig_types[2]
#define SWIGTYPE_p_CPfGoals swig_types[3]
#define SWIGTYPE_p_CPfMatches swig_types[4]
#define SWIGTYPE_p_CPfTeams swig_types[5]
#define SWIGTYPE_p_CSimulationManager swig_types[6]
#define SWIGTYPE_p_CState swig_types[7]
#define SWIGTYPE_p_CStateCredits swig_types[8]
#define SWIGTYPE_p_CStateMainMenu swig_types[9]
#define SWIGTYPE_p_CStateManager swig_types[10]
#define SWIGTYPE_p_CStateMonitor swig_types[11]
#define SWIGTYPE_p_IDAOFactory swig_types[12]
#define SWIGTYPE_p_IPfGameOptionsDAO swig_types[13]
#define SWIGTYPE_p_IPfGameStatesDAO swig_types[14]
#define SWIGTYPE_p_IPfGoalsDAO swig_types[15]
#define SWIGTYPE_p_IPfMatchesDAO swig_types[16]
#define SWIGTYPE_p_IPfTeamsDAO swig_types[17]
#define SWIGTYPE_p_Ogre__FrameEvent swig_types[18]
#define SWIGTYPE_p_std__string swig_types[19]
#define SWIGTYPE_p_std__vectorTCPfGoals_p_t swig_types[20]
#define SWIGTYPE_p_std__vectorTCPfMatches_p_t swig_types[21]
#define SWIGTYPE_p_std__vectorTCPfTeams_p_t swig_types[22]
static swig_type_info *swig_types[24];
static swig_module_info swig_module = {swig_types, 23, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Pf_Init
#define SWIG_name    "PF"
#define SWIG_import  luaopen_PF


#define SWIG_init_user SWIG_init_user_PF


#include "../db/CDAOAbstractFactory.h"
#include "../db/bean/CPfTeams.h"
#include "../db/bean/CPfMatches.h"
#include "../db/bean/CPfGoals.h"
#include "../db/dao/factory/IDAOFactory.h"
#include "../db/dao/IPfTeamsDAO.h"
#include "../db/dao/IPfMatchesDAO.h"
#include "../db/dao/IPfGoalsDAO.h"


	#include <string>


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include "../utils/CLog.h"


#include "../state/CStateManager.h"
#include "../state/CState.h"
#include "../state/CStateMainMenu.h"
#include "../state/CStateMonitor.h"
#include "../state/CStateCredits.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  std::string *result = 0 ;
  
  result = (std::string *)new std::string();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  if(!lua_isstring(L,1)) SWIG_fail_arg(1);
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'new_string'");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = -1;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = -1;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = -1;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = -1;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  SWIG_arg=0;
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = -1;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  SWIG_arg=0;
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = -1;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_string(lua_State* L) {
  int SWIG_arg = -1;
  std::string *arg1 = (std::string *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("delete_string",1,SWIGTYPE_p_std__string);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases };

static int _wrap_delete_CDAOAbstractFactory(lua_State* L) {
  int SWIG_arg = -1;
  CDAOAbstractFactory *arg1 = (CDAOAbstractFactory *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CDAOAbstractFactory,0))){
    SWIG_fail_ptr("delete_CDAOAbstractFactory",1,SWIGTYPE_p_CDAOAbstractFactory);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CDAOAbstractFactory_getIDAOFactory(lua_State* L) {
  int SWIG_arg = -1;
  std::string arg1 ;
  std::string arg2 ;
  IDAOFactory *result = 0 ;
  
  if(!lua_isstring(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (IDAOFactory *)CDAOAbstractFactory::getIDAOFactory(arg1,arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IDAOFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CDAOAbstractFactory(void *obj) {
CDAOAbstractFactory *arg1 = (CDAOAbstractFactory *) obj;
delete arg1;
}
static swig_lua_method swig_CDAOAbstractFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CDAOAbstractFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CDAOAbstractFactory_bases[] = {0};
swig_lua_class _wrap_class_CDAOAbstractFactory = { "CDAOAbstractFactory", &SWIGTYPE_p_CDAOAbstractFactory,0, swig_delete_CDAOAbstractFactory, swig_CDAOAbstractFactory_methods, swig_CDAOAbstractFactory_attributes, swig_CDAOAbstractFactory_bases };

static int _wrap_new_CPfTeams(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *result = 0 ;
  
  result = (CPfTeams *)new CPfTeams();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfTeams,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_CPfTeams(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("delete_CPfTeams",1,SWIGTYPE_p_CPfTeams);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfTeams_getXTeam(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("CPfTeams_getXTeam",1,SWIGTYPE_p_CPfTeams);
  }
  
  result = (int)(arg1)->getXTeam();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfTeams_getXTeam_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("CPfTeams_getXTeam_str",1,SWIGTYPE_p_CPfTeams);
  }
  
  {
    std::string const &_result_ref = (arg1)->getXTeam_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfTeams_getSTeam(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("CPfTeams_getSTeam",1,SWIGTYPE_p_CPfTeams);
  }
  
  {
    std::string const &_result_ref = (arg1)->getSTeam();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfTeams_getSTeam_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("CPfTeams_getSTeam_str",1,SWIGTYPE_p_CPfTeams);
  }
  
  {
    std::string const &_result_ref = (arg1)->getSTeam_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfTeams_setXTeam__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("CPfTeams_setXTeam",1,SWIGTYPE_p_CPfTeams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setXTeam(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfTeams_setXTeam__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("CPfTeams_setXTeam",1,SWIGTYPE_p_CPfTeams);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setXTeam((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfTeams_setXTeam(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfTeams, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfTeams_setXTeam__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfTeams, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfTeams_setXTeam__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfTeams_setXTeam'");
  lua_error(L);return 0;
}


static int _wrap_CPfTeams_setSTeam(lua_State* L) {
  int SWIG_arg = -1;
  CPfTeams *arg1 = (CPfTeams *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("CPfTeams_setSTeam",1,SWIGTYPE_p_CPfTeams);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setSTeam((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CPfTeams(void *obj) {
CPfTeams *arg1 = (CPfTeams *) obj;
delete arg1;
}
static swig_lua_method swig_CPfTeams_methods[] = {
    {"getXTeam", _wrap_CPfTeams_getXTeam}, 
    {"getXTeam_str", _wrap_CPfTeams_getXTeam_str}, 
    {"getSTeam", _wrap_CPfTeams_getSTeam}, 
    {"getSTeam_str", _wrap_CPfTeams_getSTeam_str}, 
    {"setXTeam", _wrap_CPfTeams_setXTeam}, 
    {"setSTeam", _wrap_CPfTeams_setSTeam}, 
    {0,0}
};
static swig_lua_attribute swig_CPfTeams_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CPfTeams_bases[] = {0};
swig_lua_class _wrap_class_CPfTeams = { "CPfTeams", &SWIGTYPE_p_CPfTeams,_wrap_new_CPfTeams, swig_delete_CPfTeams, swig_CPfTeams_methods, swig_CPfTeams_attributes, swig_CPfTeams_bases };

static int _wrap_new_CPfMatches(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *result = 0 ;
  
  result = (CPfMatches *)new CPfMatches();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfMatches,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_CPfMatches(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("delete_CPfMatches",1,SWIGTYPE_p_CPfMatches);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getDDate(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  CDate result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getDDate",1,SWIGTYPE_p_CPfMatches);
  }
  
  result = (arg1)->getDDate();
  SWIG_arg=0;
  {
    CDate * resultptr = new CDate((CDate &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CDate,1); SWIG_arg++;
  }
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getDDate_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getDDate_str",1,SWIGTYPE_p_CPfMatches);
  }
  
  {
    std::string const &_result_ref = (arg1)->getDDate_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getXFkTeamHome(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getXFkTeamHome",1,SWIGTYPE_p_CPfMatches);
  }
  
  result = (int)(arg1)->getXFkTeamHome();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getXFkTeamHome_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getXFkTeamHome_str",1,SWIGTYPE_p_CPfMatches);
  }
  
  {
    std::string const &_result_ref = (arg1)->getXFkTeamHome_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getXMatch(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getXMatch",1,SWIGTYPE_p_CPfMatches);
  }
  
  result = (int)(arg1)->getXMatch();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getXMatch_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getXMatch_str",1,SWIGTYPE_p_CPfMatches);
  }
  
  {
    std::string const &_result_ref = (arg1)->getXMatch_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getXFkTeamAway(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getXFkTeamAway",1,SWIGTYPE_p_CPfMatches);
  }
  
  result = (int)(arg1)->getXFkTeamAway();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_getXFkTeamAway_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_getXFkTeamAway_str",1,SWIGTYPE_p_CPfMatches);
  }
  
  {
    std::string const &_result_ref = (arg1)->getXFkTeamAway_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setDDate__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  CDate *arg2 = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setDDate",1,SWIGTYPE_p_CPfMatches);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CDate,0))){
    SWIG_fail_ptr("CPfMatches_setDDate",2,SWIGTYPE_p_CDate);
  }
  
  (arg1)->setDDate(*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setDDate__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setDDate",1,SWIGTYPE_p_CPfMatches);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setDDate((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setDDate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CDate, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CPfMatches_setDDate__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfMatches_setDDate__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfMatches_setDDate'");
  lua_error(L);return 0;
}


static int _wrap_CPfMatches_setXFkTeamHome__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setXFkTeamHome",1,SWIGTYPE_p_CPfMatches);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setXFkTeamHome(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setXFkTeamHome__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setXFkTeamHome",1,SWIGTYPE_p_CPfMatches);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setXFkTeamHome((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setXFkTeamHome(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfMatches_setXFkTeamHome__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfMatches_setXFkTeamHome__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfMatches_setXFkTeamHome'");
  lua_error(L);return 0;
}


static int _wrap_CPfMatches_setXMatch__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setXMatch",1,SWIGTYPE_p_CPfMatches);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setXMatch(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setXMatch__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setXMatch",1,SWIGTYPE_p_CPfMatches);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setXMatch((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setXMatch(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfMatches_setXMatch__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfMatches_setXMatch__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfMatches_setXMatch'");
  lua_error(L);return 0;
}


static int _wrap_CPfMatches_setXFkTeamAway__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setXFkTeamAway",1,SWIGTYPE_p_CPfMatches);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setXFkTeamAway(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setXFkTeamAway__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfMatches *arg1 = (CPfMatches *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("CPfMatches_setXFkTeamAway",1,SWIGTYPE_p_CPfMatches);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setXFkTeamAway((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfMatches_setXFkTeamAway(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfMatches_setXFkTeamAway__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfMatches, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfMatches_setXFkTeamAway__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfMatches_setXFkTeamAway'");
  lua_error(L);return 0;
}


static void swig_delete_CPfMatches(void *obj) {
CPfMatches *arg1 = (CPfMatches *) obj;
delete arg1;
}
static swig_lua_method swig_CPfMatches_methods[] = {
    {"getDDate", _wrap_CPfMatches_getDDate}, 
    {"getDDate_str", _wrap_CPfMatches_getDDate_str}, 
    {"getXFkTeamHome", _wrap_CPfMatches_getXFkTeamHome}, 
    {"getXFkTeamHome_str", _wrap_CPfMatches_getXFkTeamHome_str}, 
    {"getXMatch", _wrap_CPfMatches_getXMatch}, 
    {"getXMatch_str", _wrap_CPfMatches_getXMatch_str}, 
    {"getXFkTeamAway", _wrap_CPfMatches_getXFkTeamAway}, 
    {"getXFkTeamAway_str", _wrap_CPfMatches_getXFkTeamAway_str}, 
    {"setDDate", _wrap_CPfMatches_setDDate}, 
    {"setXFkTeamHome", _wrap_CPfMatches_setXFkTeamHome}, 
    {"setXMatch", _wrap_CPfMatches_setXMatch}, 
    {"setXFkTeamAway", _wrap_CPfMatches_setXFkTeamAway}, 
    {0,0}
};
static swig_lua_attribute swig_CPfMatches_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CPfMatches_bases[] = {0};
swig_lua_class _wrap_class_CPfMatches = { "CPfMatches", &SWIGTYPE_p_CPfMatches,_wrap_new_CPfMatches, swig_delete_CPfMatches, swig_CPfMatches_methods, swig_CPfMatches_attributes, swig_CPfMatches_bases };

static int _wrap_new_CPfGoals(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *result = 0 ;
  
  result = (CPfGoals *)new CPfGoals();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfGoals,1); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_CPfGoals(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("delete_CPfGoals",1,SWIGTYPE_p_CPfGoals);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getXFkTeamScorer(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getXFkTeamScorer",1,SWIGTYPE_p_CPfGoals);
  }
  
  result = (int)(arg1)->getXFkTeamScorer();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getXFkTeamScorer_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getXFkTeamScorer_str",1,SWIGTYPE_p_CPfGoals);
  }
  
  {
    std::string const &_result_ref = (arg1)->getXFkTeamScorer_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getXGoal(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getXGoal",1,SWIGTYPE_p_CPfGoals);
  }
  
  result = (int)(arg1)->getXGoal();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getXGoal_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getXGoal_str",1,SWIGTYPE_p_CPfGoals);
  }
  
  {
    std::string const &_result_ref = (arg1)->getXGoal_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getNMinute(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getNMinute",1,SWIGTYPE_p_CPfGoals);
  }
  
  result = (int)(arg1)->getNMinute();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getNMinute_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getNMinute_str",1,SWIGTYPE_p_CPfGoals);
  }
  
  {
    std::string const &_result_ref = (arg1)->getNMinute_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getXFkMatch(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getXFkMatch",1,SWIGTYPE_p_CPfGoals);
  }
  
  result = (int)(arg1)->getXFkMatch();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getXFkMatch_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getXFkMatch_str",1,SWIGTYPE_p_CPfGoals);
  }
  
  {
    std::string const &_result_ref = (arg1)->getXFkMatch_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getLOwnGoal(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getLOwnGoal",1,SWIGTYPE_p_CPfGoals);
  }
  
  result = (bool)(arg1)->getLOwnGoal();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_getLOwnGoal_str(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_getLOwnGoal_str",1,SWIGTYPE_p_CPfGoals);
  }
  
  {
    std::string const &_result_ref = (arg1)->getLOwnGoal_str();
    result = (std::string *) &_result_ref;
  }
  SWIG_arg=0;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setXFkTeamScorer__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setXFkTeamScorer",1,SWIGTYPE_p_CPfGoals);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setXFkTeamScorer(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setXFkTeamScorer__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setXFkTeamScorer",1,SWIGTYPE_p_CPfGoals);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setXFkTeamScorer((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setXFkTeamScorer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setXFkTeamScorer__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setXFkTeamScorer__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfGoals_setXFkTeamScorer'");
  lua_error(L);return 0;
}


static int _wrap_CPfGoals_setXGoal__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setXGoal",1,SWIGTYPE_p_CPfGoals);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setXGoal(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setXGoal__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setXGoal",1,SWIGTYPE_p_CPfGoals);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setXGoal((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setXGoal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setXGoal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setXGoal__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfGoals_setXGoal'");
  lua_error(L);return 0;
}


static int _wrap_CPfGoals_setNMinute__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setNMinute",1,SWIGTYPE_p_CPfGoals);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNMinute(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setNMinute__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setNMinute",1,SWIGTYPE_p_CPfGoals);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setNMinute((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setNMinute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setNMinute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setNMinute__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfGoals_setNMinute'");
  lua_error(L);return 0;
}


static int _wrap_CPfGoals_setXFkMatch__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  int arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setXFkMatch",1,SWIGTYPE_p_CPfGoals);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setXFkMatch(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setXFkMatch__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setXFkMatch",1,SWIGTYPE_p_CPfGoals);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setXFkMatch((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setXFkMatch(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setXFkMatch__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setXFkMatch__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfGoals_setXFkMatch'");
  lua_error(L);return 0;
}


static int _wrap_CPfGoals_setLOwnGoal__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  bool arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setLOwnGoal",1,SWIGTYPE_p_CPfGoals);
  }
  
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setLOwnGoal(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setLOwnGoal__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  CPfGoals *arg1 = (CPfGoals *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("CPfGoals_setLOwnGoal",1,SWIGTYPE_p_CPfGoals);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setLOwnGoal((std::string const &)*arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPfGoals_setLOwnGoal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setLOwnGoal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPfGoals, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPfGoals_setLOwnGoal__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'CPfGoals_setLOwnGoal'");
  lua_error(L);return 0;
}


static void swig_delete_CPfGoals(void *obj) {
CPfGoals *arg1 = (CPfGoals *) obj;
delete arg1;
}
static swig_lua_method swig_CPfGoals_methods[] = {
    {"getXFkTeamScorer", _wrap_CPfGoals_getXFkTeamScorer}, 
    {"getXFkTeamScorer_str", _wrap_CPfGoals_getXFkTeamScorer_str}, 
    {"getXGoal", _wrap_CPfGoals_getXGoal}, 
    {"getXGoal_str", _wrap_CPfGoals_getXGoal_str}, 
    {"getNMinute", _wrap_CPfGoals_getNMinute}, 
    {"getNMinute_str", _wrap_CPfGoals_getNMinute_str}, 
    {"getXFkMatch", _wrap_CPfGoals_getXFkMatch}, 
    {"getXFkMatch_str", _wrap_CPfGoals_getXFkMatch_str}, 
    {"getLOwnGoal", _wrap_CPfGoals_getLOwnGoal}, 
    {"getLOwnGoal_str", _wrap_CPfGoals_getLOwnGoal_str}, 
    {"setXFkTeamScorer", _wrap_CPfGoals_setXFkTeamScorer}, 
    {"setXGoal", _wrap_CPfGoals_setXGoal}, 
    {"setNMinute", _wrap_CPfGoals_setNMinute}, 
    {"setXFkMatch", _wrap_CPfGoals_setXFkMatch}, 
    {"setLOwnGoal", _wrap_CPfGoals_setLOwnGoal}, 
    {0,0}
};
static swig_lua_attribute swig_CPfGoals_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CPfGoals_bases[] = {0};
swig_lua_class _wrap_class_CPfGoals = { "CPfGoals", &SWIGTYPE_p_CPfGoals,_wrap_new_CPfGoals, swig_delete_CPfGoals, swig_CPfGoals_methods, swig_CPfGoals_attributes, swig_CPfGoals_bases };

static int _wrap_delete_IDAOFactory(lua_State* L) {
  int SWIG_arg = -1;
  IDAOFactory *arg1 = (IDAOFactory *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDAOFactory,0))){
    SWIG_fail_ptr("delete_IDAOFactory",1,SWIGTYPE_p_IDAOFactory);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDAOFactory_createSchema(lua_State* L) {
  int SWIG_arg = -1;
  IDAOFactory *arg1 = (IDAOFactory *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDAOFactory,0))){
    SWIG_fail_ptr("IDAOFactory_createSchema",1,SWIGTYPE_p_IDAOFactory);
  }
  
  result = (bool)(arg1)->createSchema();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDAOFactory_getIPfGoalsDAO(lua_State* L) {
  int SWIG_arg = -1;
  IDAOFactory *arg1 = (IDAOFactory *) 0 ;
  IPfGoalsDAO *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDAOFactory,0))){
    SWIG_fail_ptr("IDAOFactory_getIPfGoalsDAO",1,SWIGTYPE_p_IDAOFactory);
  }
  
  result = (IPfGoalsDAO *)(arg1)->getIPfGoalsDAO();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IPfGoalsDAO,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDAOFactory_getIPfGameStatesDAO(lua_State* L) {
  int SWIG_arg = -1;
  IDAOFactory *arg1 = (IDAOFactory *) 0 ;
  IPfGameStatesDAO *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDAOFactory,0))){
    SWIG_fail_ptr("IDAOFactory_getIPfGameStatesDAO",1,SWIGTYPE_p_IDAOFactory);
  }
  
  result = (IPfGameStatesDAO *)(arg1)->getIPfGameStatesDAO();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IPfGameStatesDAO,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDAOFactory_getIPfTeamsDAO(lua_State* L) {
  int SWIG_arg = -1;
  IDAOFactory *arg1 = (IDAOFactory *) 0 ;
  IPfTeamsDAO *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDAOFactory,0))){
    SWIG_fail_ptr("IDAOFactory_getIPfTeamsDAO",1,SWIGTYPE_p_IDAOFactory);
  }
  
  result = (IPfTeamsDAO *)(arg1)->getIPfTeamsDAO();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IPfTeamsDAO,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDAOFactory_getIPfMatchesDAO(lua_State* L) {
  int SWIG_arg = -1;
  IDAOFactory *arg1 = (IDAOFactory *) 0 ;
  IPfMatchesDAO *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDAOFactory,0))){
    SWIG_fail_ptr("IDAOFactory_getIPfMatchesDAO",1,SWIGTYPE_p_IDAOFactory);
  }
  
  result = (IPfMatchesDAO *)(arg1)->getIPfMatchesDAO();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IPfMatchesDAO,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IDAOFactory_getIPfGameOptionsDAO(lua_State* L) {
  int SWIG_arg = -1;
  IDAOFactory *arg1 = (IDAOFactory *) 0 ;
  IPfGameOptionsDAO *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IDAOFactory,0))){
    SWIG_fail_ptr("IDAOFactory_getIPfGameOptionsDAO",1,SWIGTYPE_p_IDAOFactory);
  }
  
  result = (IPfGameOptionsDAO *)(arg1)->getIPfGameOptionsDAO();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IPfGameOptionsDAO,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IDAOFactory(void *obj) {
IDAOFactory *arg1 = (IDAOFactory *) obj;
delete arg1;
}
static swig_lua_method swig_IDAOFactory_methods[] = {
    {"createSchema", _wrap_IDAOFactory_createSchema}, 
    {"getIPfGoalsDAO", _wrap_IDAOFactory_getIPfGoalsDAO}, 
    {"getIPfGameStatesDAO", _wrap_IDAOFactory_getIPfGameStatesDAO}, 
    {"getIPfTeamsDAO", _wrap_IDAOFactory_getIPfTeamsDAO}, 
    {"getIPfMatchesDAO", _wrap_IDAOFactory_getIPfMatchesDAO}, 
    {"getIPfGameOptionsDAO", _wrap_IDAOFactory_getIPfGameOptionsDAO}, 
    {0,0}
};
static swig_lua_attribute swig_IDAOFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IDAOFactory_bases[] = {0};
swig_lua_class _wrap_class_IDAOFactory = { "IDAOFactory", &SWIGTYPE_p_IDAOFactory,0, swig_delete_IDAOFactory, swig_IDAOFactory_methods, swig_IDAOFactory_attributes, swig_IDAOFactory_bases };

static int _wrap_delete_IPfTeamsDAO(lua_State* L) {
  int SWIG_arg = -1;
  IPfTeamsDAO *arg1 = (IPfTeamsDAO *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfTeamsDAO,0))){
    SWIG_fail_ptr("delete_IPfTeamsDAO",1,SWIGTYPE_p_IPfTeamsDAO);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfTeamsDAO_deleteReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfTeamsDAO *arg1 = (IPfTeamsDAO *) 0 ;
  CPfTeams *arg2 = (CPfTeams *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfTeamsDAO,0))){
    SWIG_fail_ptr("IPfTeamsDAO_deleteReg",1,SWIGTYPE_p_IPfTeamsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("IPfTeamsDAO_deleteReg",2,SWIGTYPE_p_CPfTeams);
  }
  
  result = (bool)(arg1)->deleteReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfTeamsDAO_insertReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfTeamsDAO *arg1 = (IPfTeamsDAO *) 0 ;
  CPfTeams *arg2 = (CPfTeams *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfTeamsDAO,0))){
    SWIG_fail_ptr("IPfTeamsDAO_insertReg",1,SWIGTYPE_p_IPfTeamsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("IPfTeamsDAO_insertReg",2,SWIGTYPE_p_CPfTeams);
  }
  
  result = (bool)(arg1)->insertReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfTeamsDAO_updateReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfTeamsDAO *arg1 = (IPfTeamsDAO *) 0 ;
  CPfTeams *arg2 = (CPfTeams *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfTeamsDAO,0))){
    SWIG_fail_ptr("IPfTeamsDAO_updateReg",1,SWIGTYPE_p_IPfTeamsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfTeams,0))){
    SWIG_fail_ptr("IPfTeamsDAO_updateReg",2,SWIGTYPE_p_CPfTeams);
  }
  
  result = (bool)(arg1)->updateReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfTeamsDAO_freeVector(lua_State* L) {
  int SWIG_arg = -1;
  IPfTeamsDAO *arg1 = (IPfTeamsDAO *) 0 ;
  std::vector<CPfTeams * > *arg2 = (std::vector<CPfTeams * > *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfTeamsDAO,0))){
    SWIG_fail_ptr("IPfTeamsDAO_freeVector",1,SWIGTYPE_p_IPfTeamsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorTCPfTeams_p_t,0))){
    SWIG_fail_ptr("IPfTeamsDAO_freeVector",2,SWIGTYPE_p_std__vectorTCPfTeams_p_t);
  }
  
  (arg1)->freeVector(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfTeamsDAO_findByXTeam__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  IPfTeamsDAO *arg1 = (IPfTeamsDAO *) 0 ;
  int arg2 ;
  CPfTeams *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfTeamsDAO,0))){
    SWIG_fail_ptr("IPfTeamsDAO_findByXTeam",1,SWIGTYPE_p_IPfTeamsDAO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPfTeams *)(arg1)->findByXTeam(arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfTeams,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfTeamsDAO_findByXTeam__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  IPfTeamsDAO *arg1 = (IPfTeamsDAO *) 0 ;
  std::string *arg2 = 0 ;
  CPfTeams *result = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfTeamsDAO,0))){
    SWIG_fail_ptr("IPfTeamsDAO_findByXTeam",1,SWIGTYPE_p_IPfTeamsDAO);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (CPfTeams *)(arg1)->findByXTeam((std::string const &)*arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfTeams,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfTeamsDAO_findByXTeam(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfTeamsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfTeamsDAO_findByXTeam__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfTeamsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfTeamsDAO_findByXTeam__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'IPfTeamsDAO_findByXTeam'");
  lua_error(L);return 0;
}


static void swig_delete_IPfTeamsDAO(void *obj) {
IPfTeamsDAO *arg1 = (IPfTeamsDAO *) obj;
delete arg1;
}
static swig_lua_method swig_IPfTeamsDAO_methods[] = {
    {"deleteReg", _wrap_IPfTeamsDAO_deleteReg}, 
    {"insertReg", _wrap_IPfTeamsDAO_insertReg}, 
    {"updateReg", _wrap_IPfTeamsDAO_updateReg}, 
    {"freeVector", _wrap_IPfTeamsDAO_freeVector}, 
    {"findByXTeam", _wrap_IPfTeamsDAO_findByXTeam}, 
    {0,0}
};
static swig_lua_attribute swig_IPfTeamsDAO_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IPfTeamsDAO_bases[] = {0};
swig_lua_class _wrap_class_IPfTeamsDAO = { "IPfTeamsDAO", &SWIGTYPE_p_IPfTeamsDAO,0, swig_delete_IPfTeamsDAO, swig_IPfTeamsDAO_methods, swig_IPfTeamsDAO_attributes, swig_IPfTeamsDAO_bases };

static int _wrap_delete_IPfMatchesDAO(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("delete_IPfMatchesDAO",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_deleteReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  CPfMatches *arg2 = (CPfMatches *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_deleteReg",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("IPfMatchesDAO_deleteReg",2,SWIGTYPE_p_CPfMatches);
  }
  
  result = (bool)(arg1)->deleteReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_insertReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  CPfMatches *arg2 = (CPfMatches *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_insertReg",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("IPfMatchesDAO_insertReg",2,SWIGTYPE_p_CPfMatches);
  }
  
  result = (bool)(arg1)->insertReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_updateReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  CPfMatches *arg2 = (CPfMatches *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_updateReg",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfMatches,0))){
    SWIG_fail_ptr("IPfMatchesDAO_updateReg",2,SWIGTYPE_p_CPfMatches);
  }
  
  result = (bool)(arg1)->updateReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_freeVector(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  std::vector<CPfMatches * > *arg2 = (std::vector<CPfMatches * > *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_freeVector",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorTCPfMatches_p_t,0))){
    SWIG_fail_ptr("IPfMatchesDAO_freeVector",2,SWIGTYPE_p_std__vectorTCPfMatches_p_t);
  }
  
  (arg1)->freeVector(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_findByXFkTeamHome__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  int arg2 ;
  CPfMatches *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_findByXFkTeamHome",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPfMatches *)(arg1)->findByXFkTeamHome(arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfMatches,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_findByXFkTeamHome__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  std::string *arg2 = 0 ;
  CPfMatches *result = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_findByXFkTeamHome",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (CPfMatches *)(arg1)->findByXFkTeamHome((std::string const &)*arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfMatches,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_findByXFkTeamHome(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfMatchesDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfMatchesDAO_findByXFkTeamHome__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfMatchesDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfMatchesDAO_findByXFkTeamHome__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'IPfMatchesDAO_findByXFkTeamHome'");
  lua_error(L);return 0;
}


static int _wrap_IPfMatchesDAO_findByXMatch__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  int arg2 ;
  CPfMatches *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_findByXMatch",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPfMatches *)(arg1)->findByXMatch(arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfMatches,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_findByXMatch__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  std::string *arg2 = 0 ;
  CPfMatches *result = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_findByXMatch",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (CPfMatches *)(arg1)->findByXMatch((std::string const &)*arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfMatches,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_findByXMatch(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfMatchesDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfMatchesDAO_findByXMatch__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfMatchesDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfMatchesDAO_findByXMatch__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'IPfMatchesDAO_findByXMatch'");
  lua_error(L);return 0;
}


static int _wrap_IPfMatchesDAO_findByXFkTeamAway__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  int arg2 ;
  CPfMatches *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_findByXFkTeamAway",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPfMatches *)(arg1)->findByXFkTeamAway(arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfMatches,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_findByXFkTeamAway__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  IPfMatchesDAO *arg1 = (IPfMatchesDAO *) 0 ;
  std::string *arg2 = 0 ;
  CPfMatches *result = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfMatchesDAO,0))){
    SWIG_fail_ptr("IPfMatchesDAO_findByXFkTeamAway",1,SWIGTYPE_p_IPfMatchesDAO);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (CPfMatches *)(arg1)->findByXFkTeamAway((std::string const &)*arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfMatches,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfMatchesDAO_findByXFkTeamAway(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfMatchesDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfMatchesDAO_findByXFkTeamAway__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfMatchesDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfMatchesDAO_findByXFkTeamAway__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'IPfMatchesDAO_findByXFkTeamAway'");
  lua_error(L);return 0;
}


static void swig_delete_IPfMatchesDAO(void *obj) {
IPfMatchesDAO *arg1 = (IPfMatchesDAO *) obj;
delete arg1;
}
static swig_lua_method swig_IPfMatchesDAO_methods[] = {
    {"deleteReg", _wrap_IPfMatchesDAO_deleteReg}, 
    {"insertReg", _wrap_IPfMatchesDAO_insertReg}, 
    {"updateReg", _wrap_IPfMatchesDAO_updateReg}, 
    {"freeVector", _wrap_IPfMatchesDAO_freeVector}, 
    {"findByXFkTeamHome", _wrap_IPfMatchesDAO_findByXFkTeamHome}, 
    {"findByXMatch", _wrap_IPfMatchesDAO_findByXMatch}, 
    {"findByXFkTeamAway", _wrap_IPfMatchesDAO_findByXFkTeamAway}, 
    {0,0}
};
static swig_lua_attribute swig_IPfMatchesDAO_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IPfMatchesDAO_bases[] = {0};
swig_lua_class _wrap_class_IPfMatchesDAO = { "IPfMatchesDAO", &SWIGTYPE_p_IPfMatchesDAO,0, swig_delete_IPfMatchesDAO, swig_IPfMatchesDAO_methods, swig_IPfMatchesDAO_attributes, swig_IPfMatchesDAO_bases };

static int _wrap_delete_IPfGoalsDAO(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("delete_IPfGoalsDAO",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_deleteReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  CPfGoals *arg2 = (CPfGoals *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_deleteReg",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("IPfGoalsDAO_deleteReg",2,SWIGTYPE_p_CPfGoals);
  }
  
  result = (bool)(arg1)->deleteReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_insertReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  CPfGoals *arg2 = (CPfGoals *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_insertReg",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("IPfGoalsDAO_insertReg",2,SWIGTYPE_p_CPfGoals);
  }
  
  result = (bool)(arg1)->insertReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_updateReg(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  CPfGoals *arg2 = (CPfGoals *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_updateReg",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPfGoals,0))){
    SWIG_fail_ptr("IPfGoalsDAO_updateReg",2,SWIGTYPE_p_CPfGoals);
  }
  
  result = (bool)(arg1)->updateReg(arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_freeVector(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  std::vector<CPfGoals * > *arg2 = (std::vector<CPfGoals * > *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_freeVector",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorTCPfGoals_p_t,0))){
    SWIG_fail_ptr("IPfGoalsDAO_freeVector",2,SWIGTYPE_p_std__vectorTCPfGoals_p_t);
  }
  
  (arg1)->freeVector(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_findByXFkTeamScorer__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  int arg2 ;
  CPfGoals *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_findByXFkTeamScorer",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPfGoals *)(arg1)->findByXFkTeamScorer(arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfGoals,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_findByXFkTeamScorer__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  std::string *arg2 = 0 ;
  CPfGoals *result = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_findByXFkTeamScorer",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (CPfGoals *)(arg1)->findByXFkTeamScorer((std::string const &)*arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfGoals,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_findByXFkTeamScorer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfGoalsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfGoalsDAO_findByXFkTeamScorer__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfGoalsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfGoalsDAO_findByXFkTeamScorer__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'IPfGoalsDAO_findByXFkTeamScorer'");
  lua_error(L);return 0;
}


static int _wrap_IPfGoalsDAO_findByXGoal__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  int arg2 ;
  CPfGoals *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_findByXGoal",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPfGoals *)(arg1)->findByXGoal(arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfGoals,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_findByXGoal__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  std::string *arg2 = 0 ;
  CPfGoals *result = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_findByXGoal",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (CPfGoals *)(arg1)->findByXGoal((std::string const &)*arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfGoals,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_findByXGoal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfGoalsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfGoalsDAO_findByXGoal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfGoalsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfGoalsDAO_findByXGoal__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'IPfGoalsDAO_findByXGoal'");
  lua_error(L);return 0;
}


static int _wrap_IPfGoalsDAO_findByXFkMatch__SWIG_0(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  int arg2 ;
  CPfGoals *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isnumber(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_findByXFkMatch",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPfGoals *)(arg1)->findByXFkMatch(arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfGoals,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_findByXFkMatch__SWIG_1(lua_State* L) {
  int SWIG_arg = -1;
  IPfGoalsDAO *arg1 = (IPfGoalsDAO *) 0 ;
  std::string *arg2 = 0 ;
  CPfGoals *result = 0 ;
  std::string temp2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IPfGoalsDAO,0))){
    SWIG_fail_ptr("IPfGoalsDAO_findByXFkMatch",1,SWIGTYPE_p_IPfGoalsDAO);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (CPfGoals *)(arg1)->findByXFkMatch((std::string const &)*arg2);
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPfGoals,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPfGoalsDAO_findByXFkMatch(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfGoalsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfGoalsDAO_findByXFkMatch__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IPfGoalsDAO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPfGoalsDAO_findByXFkMatch__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"No matching function for overloaded 'IPfGoalsDAO_findByXFkMatch'");
  lua_error(L);return 0;
}


static void swig_delete_IPfGoalsDAO(void *obj) {
IPfGoalsDAO *arg1 = (IPfGoalsDAO *) obj;
delete arg1;
}
static swig_lua_method swig_IPfGoalsDAO_methods[] = {
    {"deleteReg", _wrap_IPfGoalsDAO_deleteReg}, 
    {"insertReg", _wrap_IPfGoalsDAO_insertReg}, 
    {"updateReg", _wrap_IPfGoalsDAO_updateReg}, 
    {"freeVector", _wrap_IPfGoalsDAO_freeVector}, 
    {"findByXFkTeamScorer", _wrap_IPfGoalsDAO_findByXFkTeamScorer}, 
    {"findByXGoal", _wrap_IPfGoalsDAO_findByXGoal}, 
    {"findByXFkMatch", _wrap_IPfGoalsDAO_findByXFkMatch}, 
    {0,0}
};
static swig_lua_attribute swig_IPfGoalsDAO_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IPfGoalsDAO_bases[] = {0};
swig_lua_class _wrap_class_IPfGoalsDAO = { "IPfGoalsDAO", &SWIGTYPE_p_IPfGoalsDAO,0, swig_delete_IPfGoalsDAO, swig_IPfGoalsDAO_methods, swig_IPfGoalsDAO_attributes, swig_IPfGoalsDAO_bases };

static int _wrap_delete_CLog(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("delete_CLog",1,SWIGTYPE_p_CLog);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_getInstance(lua_State* L) {
  int SWIG_arg = -1;
  CLog *result = 0 ;
  
  result = (CLog *)CLog::getInstance();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CLog,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_debug(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_debug",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->debug((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_info(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_info",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->info((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_warning(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_warning",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->warning((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_error(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_error",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->error((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_exception(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isstring(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_exception",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->exception((char const *)arg2,arg3);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_isDebugActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_isDebugActive",1,SWIGTYPE_p_CLog);
  }
  
  result = (bool)(arg1)->isDebugActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_isInfoActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_isInfoActive",1,SWIGTYPE_p_CLog);
  }
  
  result = (bool)(arg1)->isInfoActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_isWarningActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_isWarningActive",1,SWIGTYPE_p_CLog);
  }
  
  result = (bool)(arg1)->isWarningActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_isErrorActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_isErrorActive",1,SWIGTYPE_p_CLog);
  }
  
  result = (bool)(arg1)->isErrorActive();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_setDebugActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_setDebugActive",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setDebugActive(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_setInfoActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_setInfoActive",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setInfoActive(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_setWarningActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_setWarningActive",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setWarningActive(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CLog_setErrorActive(lua_State* L) {
  int SWIG_arg = -1;
  CLog *arg1 = (CLog *) 0 ;
  bool arg2 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isboolean(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CLog,0))){
    SWIG_fail_ptr("CLog_setErrorActive",1,SWIGTYPE_p_CLog);
  }
  
  arg2 = (bool)lua_toboolean(L, 2);
  (arg1)->setErrorActive(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CLog(void *obj) {
CLog *arg1 = (CLog *) obj;
delete arg1;
}
static swig_lua_method swig_CLog_methods[] = {
    {"debug", _wrap_CLog_debug}, 
    {"info", _wrap_CLog_info}, 
    {"warning", _wrap_CLog_warning}, 
    {"error", _wrap_CLog_error}, 
    {"exception", _wrap_CLog_exception}, 
    {"isDebugActive", _wrap_CLog_isDebugActive}, 
    {"isInfoActive", _wrap_CLog_isInfoActive}, 
    {"isWarningActive", _wrap_CLog_isWarningActive}, 
    {"isErrorActive", _wrap_CLog_isErrorActive}, 
    {"setDebugActive", _wrap_CLog_setDebugActive}, 
    {"setInfoActive", _wrap_CLog_setInfoActive}, 
    {"setWarningActive", _wrap_CLog_setWarningActive}, 
    {"setErrorActive", _wrap_CLog_setErrorActive}, 
    {0,0}
};
static swig_lua_attribute swig_CLog_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CLog_bases[] = {0};
swig_lua_class _wrap_class_CLog = { "CLog", &SWIGTYPE_p_CLog,0, swig_delete_CLog, swig_CLog_methods, swig_CLog_attributes, swig_CLog_bases };

static int _wrap_delete_CStateManager(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("delete_CStateManager",1,SWIGTYPE_p_CStateManager);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_getInstance(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *result = 0 ;
  
  result = (CStateManager *)CStateManager::getInstance();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CStateManager,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_forcedPopStack(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_forcedPopStack",1,SWIGTYPE_p_CStateManager);
  }
  
  (arg1)->forcedPopStack();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_frameEnded(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_frameEnded",1,SWIGTYPE_p_CStateManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("CStateManager_frameEnded",2,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  result = (bool)(arg1)->frameEnded((Ogre::FrameEvent const &)*arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_frameStarted(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!lua_isuserdata(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_frameStarted",1,SWIGTYPE_p_CStateManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("CStateManager_frameStarted",2,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  result = (bool)(arg1)->frameStarted((Ogre::FrameEvent const &)*arg2);
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_popStack(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_popStack",1,SWIGTYPE_p_CStateManager);
  }
  
  (arg1)->popStack();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_popState(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_popState",1,SWIGTYPE_p_CStateManager);
  }
  
  (arg1)->popState();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_popToState(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  CState *arg2 = (CState *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_popToState",1,SWIGTYPE_p_CStateManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CState,0))){
    SWIG_fail_ptr("CStateManager_popToState",2,SWIGTYPE_p_CState);
  }
  
  (arg1)->popToState(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_pushState(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  CState *arg2 = (CState *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg(2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_pushState",1,SWIGTYPE_p_CStateManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CState,0))){
    SWIG_fail_ptr("CStateManager_pushState",2,SWIGTYPE_p_CState);
  }
  
  (arg1)->pushState(arg2);
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateManager_getTimeSinceLastFrame(lua_State* L) {
  int SWIG_arg = -1;
  CStateManager *arg1 = (CStateManager *) 0 ;
  float result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateManager,0))){
    SWIG_fail_ptr("CStateManager_getTimeSinceLastFrame",1,SWIGTYPE_p_CStateManager);
  }
  
  result = (float)(arg1)->getTimeSinceLastFrame();
  SWIG_arg=0;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CStateManager(void *obj) {
CStateManager *arg1 = (CStateManager *) obj;
delete arg1;
}
static swig_lua_method swig_CStateManager_methods[] = {
    {"forcedPopStack", _wrap_CStateManager_forcedPopStack}, 
    {"frameEnded", _wrap_CStateManager_frameEnded}, 
    {"frameStarted", _wrap_CStateManager_frameStarted}, 
    {"popStack", _wrap_CStateManager_popStack}, 
    {"popState", _wrap_CStateManager_popState}, 
    {"popToState", _wrap_CStateManager_popToState}, 
    {"pushState", _wrap_CStateManager_pushState}, 
    {"getTimeSinceLastFrame", _wrap_CStateManager_getTimeSinceLastFrame}, 
    {0,0}
};
static swig_lua_attribute swig_CStateManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CStateManager_bases[] = {0};
swig_lua_class _wrap_class_CStateManager = { "CStateManager", &SWIGTYPE_p_CStateManager,0, swig_delete_CStateManager, swig_CStateManager_methods, swig_CStateManager_attributes, swig_CStateManager_bases };

static int _wrap_delete_CState(lua_State* L) {
  int SWIG_arg = -1;
  CState *arg1 = (CState *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CState,0))){
    SWIG_fail_ptr("delete_CState",1,SWIGTYPE_p_CState);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CState_enter(lua_State* L) {
  int SWIG_arg = -1;
  CState *arg1 = (CState *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CState,0))){
    SWIG_fail_ptr("CState_enter",1,SWIGTYPE_p_CState);
  }
  
  (arg1)->enter();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CState_forcedLeave(lua_State* L) {
  int SWIG_arg = -1;
  CState *arg1 = (CState *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CState,0))){
    SWIG_fail_ptr("CState_forcedLeave",1,SWIGTYPE_p_CState);
  }
  
  (arg1)->forcedLeave();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CState_leave(lua_State* L) {
  int SWIG_arg = -1;
  CState *arg1 = (CState *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CState,0))){
    SWIG_fail_ptr("CState_leave",1,SWIGTYPE_p_CState);
  }
  
  result = (bool)(arg1)->leave();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CState_update(lua_State* L) {
  int SWIG_arg = -1;
  CState *arg1 = (CState *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CState,0))){
    SWIG_fail_ptr("CState_update",1,SWIGTYPE_p_CState);
  }
  
  (arg1)->update();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CState(void *obj) {
CState *arg1 = (CState *) obj;
delete arg1;
}
static swig_lua_method swig_CState_methods[] = {
    {"enter", _wrap_CState_enter}, 
    {"forcedLeave", _wrap_CState_forcedLeave}, 
    {"leave", _wrap_CState_leave}, 
    {"update", _wrap_CState_update}, 
    {0,0}
};
static swig_lua_attribute swig_CState_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CState_bases[] = {0};
swig_lua_class _wrap_class_CState = { "CState", &SWIGTYPE_p_CState,0, swig_delete_CState, swig_CState_methods, swig_CState_attributes, swig_CState_bases };

static int _wrap_CStateMainMenu_getInstance(lua_State* L) {
  int SWIG_arg = -1;
  CStateMainMenu *result = 0 ;
  
  result = (CStateMainMenu *)CStateMainMenu::getInstance();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CStateMainMenu,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_CStateMainMenu(lua_State* L) {
  int SWIG_arg = -1;
  CStateMainMenu *arg1 = (CStateMainMenu *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMainMenu,0))){
    SWIG_fail_ptr("delete_CStateMainMenu",1,SWIGTYPE_p_CStateMainMenu);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMainMenu_enter(lua_State* L) {
  int SWIG_arg = -1;
  CStateMainMenu *arg1 = (CStateMainMenu *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMainMenu,0))){
    SWIG_fail_ptr("CStateMainMenu_enter",1,SWIGTYPE_p_CStateMainMenu);
  }
  
  (arg1)->enter();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMainMenu_forcedLeave(lua_State* L) {
  int SWIG_arg = -1;
  CStateMainMenu *arg1 = (CStateMainMenu *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMainMenu,0))){
    SWIG_fail_ptr("CStateMainMenu_forcedLeave",1,SWIGTYPE_p_CStateMainMenu);
  }
  
  (arg1)->forcedLeave();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMainMenu_leave(lua_State* L) {
  int SWIG_arg = -1;
  CStateMainMenu *arg1 = (CStateMainMenu *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMainMenu,0))){
    SWIG_fail_ptr("CStateMainMenu_leave",1,SWIGTYPE_p_CStateMainMenu);
  }
  
  result = (bool)(arg1)->leave();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMainMenu_update(lua_State* L) {
  int SWIG_arg = -1;
  CStateMainMenu *arg1 = (CStateMainMenu *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMainMenu,0))){
    SWIG_fail_ptr("CStateMainMenu_update",1,SWIGTYPE_p_CStateMainMenu);
  }
  
  (arg1)->update();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CStateMainMenu(void *obj) {
CStateMainMenu *arg1 = (CStateMainMenu *) obj;
delete arg1;
}
static swig_lua_method swig_CStateMainMenu_methods[] = {
    {"enter", _wrap_CStateMainMenu_enter}, 
    {"forcedLeave", _wrap_CStateMainMenu_forcedLeave}, 
    {"leave", _wrap_CStateMainMenu_leave}, 
    {"update", _wrap_CStateMainMenu_update}, 
    {0,0}
};
static swig_lua_attribute swig_CStateMainMenu_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CStateMainMenu_bases[] = {&_wrap_class_CState,0};
swig_lua_class _wrap_class_CStateMainMenu = { "CStateMainMenu", &SWIGTYPE_p_CStateMainMenu,0, swig_delete_CStateMainMenu, swig_CStateMainMenu_methods, swig_CStateMainMenu_attributes, swig_CStateMainMenu_bases };

static int _wrap_CStateMonitor_getInstance(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *result = 0 ;
  
  result = (CStateMonitor *)CStateMonitor::getInstance();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CStateMonitor,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_CStateMonitor(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("delete_CStateMonitor",1,SWIGTYPE_p_CStateMonitor);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMonitor_enter(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("CStateMonitor_enter",1,SWIGTYPE_p_CStateMonitor);
  }
  
  (arg1)->enter();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMonitor_forcedLeave(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("CStateMonitor_forcedLeave",1,SWIGTYPE_p_CStateMonitor);
  }
  
  (arg1)->forcedLeave();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMonitor_leave(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("CStateMonitor_leave",1,SWIGTYPE_p_CStateMonitor);
  }
  
  result = (bool)(arg1)->leave();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMonitor_update(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("CStateMonitor_update",1,SWIGTYPE_p_CStateMonitor);
  }
  
  (arg1)->update();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMonitor_switchTo2DView(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("CStateMonitor_switchTo2DView",1,SWIGTYPE_p_CStateMonitor);
  }
  
  (arg1)->switchTo2DView();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMonitor_switchTo3DView(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("CStateMonitor_switchTo3DView",1,SWIGTYPE_p_CStateMonitor);
  }
  
  (arg1)->switchTo3DView();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateMonitor_getSimulationManager(lua_State* L) {
  int SWIG_arg = -1;
  CStateMonitor *arg1 = (CStateMonitor *) 0 ;
  CSimulationManager *result = 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateMonitor,0))){
    SWIG_fail_ptr("CStateMonitor_getSimulationManager",1,SWIGTYPE_p_CStateMonitor);
  }
  
  result = (CSimulationManager *)(arg1)->getSimulationManager();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CSimulationManager,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CStateMonitor(void *obj) {
CStateMonitor *arg1 = (CStateMonitor *) obj;
delete arg1;
}
static swig_lua_method swig_CStateMonitor_methods[] = {
    {"enter", _wrap_CStateMonitor_enter}, 
    {"forcedLeave", _wrap_CStateMonitor_forcedLeave}, 
    {"leave", _wrap_CStateMonitor_leave}, 
    {"update", _wrap_CStateMonitor_update}, 
    {"switchTo2DView", _wrap_CStateMonitor_switchTo2DView}, 
    {"switchTo3DView", _wrap_CStateMonitor_switchTo3DView}, 
    {"getSimulationManager", _wrap_CStateMonitor_getSimulationManager}, 
    {0,0}
};
static swig_lua_attribute swig_CStateMonitor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CStateMonitor_bases[] = {&_wrap_class_CState,0};
swig_lua_class _wrap_class_CStateMonitor = { "CStateMonitor", &SWIGTYPE_p_CStateMonitor,0, swig_delete_CStateMonitor, swig_CStateMonitor_methods, swig_CStateMonitor_attributes, swig_CStateMonitor_bases };

static int _wrap_CStateCredits_getInstance(lua_State* L) {
  int SWIG_arg = -1;
  CStateCredits *result = 0 ;
  
  result = (CStateCredits *)CStateCredits::getInstance();
  SWIG_arg=0;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CStateCredits,0); SWIG_arg++; 
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_CStateCredits(lua_State* L) {
  int SWIG_arg = -1;
  CStateCredits *arg1 = (CStateCredits *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateCredits,0))){
    SWIG_fail_ptr("delete_CStateCredits",1,SWIGTYPE_p_CStateCredits);
  }
  
  delete arg1;
  
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateCredits_enter(lua_State* L) {
  int SWIG_arg = -1;
  CStateCredits *arg1 = (CStateCredits *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateCredits,0))){
    SWIG_fail_ptr("CStateCredits_enter",1,SWIGTYPE_p_CStateCredits);
  }
  
  (arg1)->enter();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateCredits_forcedLeave(lua_State* L) {
  int SWIG_arg = -1;
  CStateCredits *arg1 = (CStateCredits *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateCredits,0))){
    SWIG_fail_ptr("CStateCredits_forcedLeave",1,SWIGTYPE_p_CStateCredits);
  }
  
  (arg1)->forcedLeave();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateCredits_leave(lua_State* L) {
  int SWIG_arg = -1;
  CStateCredits *arg1 = (CStateCredits *) 0 ;
  bool result;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateCredits,0))){
    SWIG_fail_ptr("CStateCredits_leave",1,SWIGTYPE_p_CStateCredits);
  }
  
  result = (bool)(arg1)->leave();
  SWIG_arg=0;
  lua_pushboolean(L,(int)result); SWIG_arg++;
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CStateCredits_update(lua_State* L) {
  int SWIG_arg = -1;
  CStateCredits *arg1 = (CStateCredits *) 0 ;
  
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg(1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CStateCredits,0))){
    SWIG_fail_ptr("CStateCredits_update",1,SWIGTYPE_p_CStateCredits);
  }
  
  (arg1)->update();
  SWIG_arg=0;
  
  return SWIG_arg;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CStateCredits(void *obj) {
CStateCredits *arg1 = (CStateCredits *) obj;
delete arg1;
}
static swig_lua_method swig_CStateCredits_methods[] = {
    {"enter", _wrap_CStateCredits_enter}, 
    {"forcedLeave", _wrap_CStateCredits_forcedLeave}, 
    {"leave", _wrap_CStateCredits_leave}, 
    {"update", _wrap_CStateCredits_update}, 
    {0,0}
};
static swig_lua_attribute swig_CStateCredits_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CStateCredits_bases[] = {&_wrap_class_CState,0};
swig_lua_class _wrap_class_CStateCredits = { "CStateCredits", &SWIGTYPE_p_CStateCredits,0, swig_delete_CStateCredits, swig_CStateCredits_methods, swig_CStateCredits_attributes, swig_CStateCredits_bases };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "new_string",_wrap_new_string},
    { "string_size", _wrap_string_size},
    { "string_length", _wrap_string_length},
    { "string_empty", _wrap_string_empty},
    { "string_c_str", _wrap_string_c_str},
    { "string_data", _wrap_string_data},
    { "string_assign", _wrap_string_assign},
    { "delete_string", _wrap_delete_string},
    { "delete_CDAOAbstractFactory", _wrap_delete_CDAOAbstractFactory},
    { "CDAOAbstractFactory_getIDAOFactory", _wrap_CDAOAbstractFactory_getIDAOFactory},
    { "new_CPfTeams", _wrap_new_CPfTeams},
    { "delete_CPfTeams", _wrap_delete_CPfTeams},
    { "CPfTeams_getXTeam", _wrap_CPfTeams_getXTeam},
    { "CPfTeams_getXTeam_str", _wrap_CPfTeams_getXTeam_str},
    { "CPfTeams_getSTeam", _wrap_CPfTeams_getSTeam},
    { "CPfTeams_getSTeam_str", _wrap_CPfTeams_getSTeam_str},
    { "CPfTeams_setXTeam",_wrap_CPfTeams_setXTeam},
    { "CPfTeams_setSTeam", _wrap_CPfTeams_setSTeam},
    { "new_CPfMatches", _wrap_new_CPfMatches},
    { "delete_CPfMatches", _wrap_delete_CPfMatches},
    { "CPfMatches_getDDate", _wrap_CPfMatches_getDDate},
    { "CPfMatches_getDDate_str", _wrap_CPfMatches_getDDate_str},
    { "CPfMatches_getXFkTeamHome", _wrap_CPfMatches_getXFkTeamHome},
    { "CPfMatches_getXFkTeamHome_str", _wrap_CPfMatches_getXFkTeamHome_str},
    { "CPfMatches_getXMatch", _wrap_CPfMatches_getXMatch},
    { "CPfMatches_getXMatch_str", _wrap_CPfMatches_getXMatch_str},
    { "CPfMatches_getXFkTeamAway", _wrap_CPfMatches_getXFkTeamAway},
    { "CPfMatches_getXFkTeamAway_str", _wrap_CPfMatches_getXFkTeamAway_str},
    { "CPfMatches_setDDate",_wrap_CPfMatches_setDDate},
    { "CPfMatches_setXFkTeamHome",_wrap_CPfMatches_setXFkTeamHome},
    { "CPfMatches_setXMatch",_wrap_CPfMatches_setXMatch},
    { "CPfMatches_setXFkTeamAway",_wrap_CPfMatches_setXFkTeamAway},
    { "new_CPfGoals", _wrap_new_CPfGoals},
    { "delete_CPfGoals", _wrap_delete_CPfGoals},
    { "CPfGoals_getXFkTeamScorer", _wrap_CPfGoals_getXFkTeamScorer},
    { "CPfGoals_getXFkTeamScorer_str", _wrap_CPfGoals_getXFkTeamScorer_str},
    { "CPfGoals_getXGoal", _wrap_CPfGoals_getXGoal},
    { "CPfGoals_getXGoal_str", _wrap_CPfGoals_getXGoal_str},
    { "CPfGoals_getNMinute", _wrap_CPfGoals_getNMinute},
    { "CPfGoals_getNMinute_str", _wrap_CPfGoals_getNMinute_str},
    { "CPfGoals_getXFkMatch", _wrap_CPfGoals_getXFkMatch},
    { "CPfGoals_getXFkMatch_str", _wrap_CPfGoals_getXFkMatch_str},
    { "CPfGoals_getLOwnGoal", _wrap_CPfGoals_getLOwnGoal},
    { "CPfGoals_getLOwnGoal_str", _wrap_CPfGoals_getLOwnGoal_str},
    { "CPfGoals_setXFkTeamScorer",_wrap_CPfGoals_setXFkTeamScorer},
    { "CPfGoals_setXGoal",_wrap_CPfGoals_setXGoal},
    { "CPfGoals_setNMinute",_wrap_CPfGoals_setNMinute},
    { "CPfGoals_setXFkMatch",_wrap_CPfGoals_setXFkMatch},
    { "CPfGoals_setLOwnGoal",_wrap_CPfGoals_setLOwnGoal},
    { "delete_IDAOFactory", _wrap_delete_IDAOFactory},
    { "IDAOFactory_createSchema", _wrap_IDAOFactory_createSchema},
    { "IDAOFactory_getIPfGoalsDAO", _wrap_IDAOFactory_getIPfGoalsDAO},
    { "IDAOFactory_getIPfGameStatesDAO", _wrap_IDAOFactory_getIPfGameStatesDAO},
    { "IDAOFactory_getIPfTeamsDAO", _wrap_IDAOFactory_getIPfTeamsDAO},
    { "IDAOFactory_getIPfMatchesDAO", _wrap_IDAOFactory_getIPfMatchesDAO},
    { "IDAOFactory_getIPfGameOptionsDAO", _wrap_IDAOFactory_getIPfGameOptionsDAO},
    { "delete_IPfTeamsDAO", _wrap_delete_IPfTeamsDAO},
    { "IPfTeamsDAO_deleteReg", _wrap_IPfTeamsDAO_deleteReg},
    { "IPfTeamsDAO_insertReg", _wrap_IPfTeamsDAO_insertReg},
    { "IPfTeamsDAO_updateReg", _wrap_IPfTeamsDAO_updateReg},
    { "IPfTeamsDAO_freeVector", _wrap_IPfTeamsDAO_freeVector},
    { "IPfTeamsDAO_findByXTeam",_wrap_IPfTeamsDAO_findByXTeam},
    { "delete_IPfMatchesDAO", _wrap_delete_IPfMatchesDAO},
    { "IPfMatchesDAO_deleteReg", _wrap_IPfMatchesDAO_deleteReg},
    { "IPfMatchesDAO_insertReg", _wrap_IPfMatchesDAO_insertReg},
    { "IPfMatchesDAO_updateReg", _wrap_IPfMatchesDAO_updateReg},
    { "IPfMatchesDAO_freeVector", _wrap_IPfMatchesDAO_freeVector},
    { "IPfMatchesDAO_findByXFkTeamHome",_wrap_IPfMatchesDAO_findByXFkTeamHome},
    { "IPfMatchesDAO_findByXMatch",_wrap_IPfMatchesDAO_findByXMatch},
    { "IPfMatchesDAO_findByXFkTeamAway",_wrap_IPfMatchesDAO_findByXFkTeamAway},
    { "delete_IPfGoalsDAO", _wrap_delete_IPfGoalsDAO},
    { "IPfGoalsDAO_deleteReg", _wrap_IPfGoalsDAO_deleteReg},
    { "IPfGoalsDAO_insertReg", _wrap_IPfGoalsDAO_insertReg},
    { "IPfGoalsDAO_updateReg", _wrap_IPfGoalsDAO_updateReg},
    { "IPfGoalsDAO_freeVector", _wrap_IPfGoalsDAO_freeVector},
    { "IPfGoalsDAO_findByXFkTeamScorer",_wrap_IPfGoalsDAO_findByXFkTeamScorer},
    { "IPfGoalsDAO_findByXGoal",_wrap_IPfGoalsDAO_findByXGoal},
    { "IPfGoalsDAO_findByXFkMatch",_wrap_IPfGoalsDAO_findByXFkMatch},
    { "delete_CLog", _wrap_delete_CLog},
    { "CLog_getInstance", _wrap_CLog_getInstance},
    { "CLog_debug", _wrap_CLog_debug},
    { "CLog_info", _wrap_CLog_info},
    { "CLog_warning", _wrap_CLog_warning},
    { "CLog_error", _wrap_CLog_error},
    { "CLog_exception", _wrap_CLog_exception},
    { "CLog_isDebugActive", _wrap_CLog_isDebugActive},
    { "CLog_isInfoActive", _wrap_CLog_isInfoActive},
    { "CLog_isWarningActive", _wrap_CLog_isWarningActive},
    { "CLog_isErrorActive", _wrap_CLog_isErrorActive},
    { "CLog_setDebugActive", _wrap_CLog_setDebugActive},
    { "CLog_setInfoActive", _wrap_CLog_setInfoActive},
    { "CLog_setWarningActive", _wrap_CLog_setWarningActive},
    { "CLog_setErrorActive", _wrap_CLog_setErrorActive},
    { "delete_CStateManager", _wrap_delete_CStateManager},
    { "CStateManager_getInstance", _wrap_CStateManager_getInstance},
    { "CStateManager_forcedPopStack", _wrap_CStateManager_forcedPopStack},
    { "CStateManager_frameEnded", _wrap_CStateManager_frameEnded},
    { "CStateManager_frameStarted", _wrap_CStateManager_frameStarted},
    { "CStateManager_popStack", _wrap_CStateManager_popStack},
    { "CStateManager_popState", _wrap_CStateManager_popState},
    { "CStateManager_popToState", _wrap_CStateManager_popToState},
    { "CStateManager_pushState", _wrap_CStateManager_pushState},
    { "CStateManager_getTimeSinceLastFrame", _wrap_CStateManager_getTimeSinceLastFrame},
    { "delete_CState", _wrap_delete_CState},
    { "CState_enter", _wrap_CState_enter},
    { "CState_forcedLeave", _wrap_CState_forcedLeave},
    { "CState_leave", _wrap_CState_leave},
    { "CState_update", _wrap_CState_update},
    { "CStateMainMenu_getInstance", _wrap_CStateMainMenu_getInstance},
    { "delete_CStateMainMenu", _wrap_delete_CStateMainMenu},
    { "CStateMainMenu_enter", _wrap_CStateMainMenu_enter},
    { "CStateMainMenu_forcedLeave", _wrap_CStateMainMenu_forcedLeave},
    { "CStateMainMenu_leave", _wrap_CStateMainMenu_leave},
    { "CStateMainMenu_update", _wrap_CStateMainMenu_update},
    { "CStateMonitor_getInstance", _wrap_CStateMonitor_getInstance},
    { "delete_CStateMonitor", _wrap_delete_CStateMonitor},
    { "CStateMonitor_enter", _wrap_CStateMonitor_enter},
    { "CStateMonitor_forcedLeave", _wrap_CStateMonitor_forcedLeave},
    { "CStateMonitor_leave", _wrap_CStateMonitor_leave},
    { "CStateMonitor_update", _wrap_CStateMonitor_update},
    { "CStateMonitor_switchTo2DView", _wrap_CStateMonitor_switchTo2DView},
    { "CStateMonitor_switchTo3DView", _wrap_CStateMonitor_switchTo3DView},
    { "CStateMonitor_getSimulationManager", _wrap_CStateMonitor_getSimulationManager},
    { "CStateCredits_getInstance", _wrap_CStateCredits_getInstance},
    { "delete_CStateCredits", _wrap_delete_CStateCredits},
    { "CStateCredits_enter", _wrap_CStateCredits_enter},
    { "CStateCredits_forcedLeave", _wrap_CStateCredits_forcedLeave},
    { "CStateCredits_leave", _wrap_CStateCredits_leave},
    { "CStateCredits_update", _wrap_CStateCredits_update},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CStateMonitorTo_p_CState(void *x) {
    return (void *)((CState *)  ((CStateMonitor *) x));
}
static void *_p_CStateMainMenuTo_p_CState(void *x) {
    return (void *)((CState *)  ((CStateMainMenu *) x));
}
static void *_p_CStateCreditsTo_p_CState(void *x) {
    return (void *)((CState *)  ((CStateCredits *) x));
}
static swig_type_info _swigt__p_CDAOAbstractFactory = {"_p_CDAOAbstractFactory", "CDAOAbstractFactory *", 0, 0, (void*)&_wrap_class_CDAOAbstractFactory, 0};
static swig_type_info _swigt__p_CDate = {"_p_CDate", "CDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CLog = {"_p_CLog", "CLog *", 0, 0, (void*)&_wrap_class_CLog, 0};
static swig_type_info _swigt__p_CPfGoals = {"_p_CPfGoals", "CPfGoals *", 0, 0, (void*)&_wrap_class_CPfGoals, 0};
static swig_type_info _swigt__p_CPfMatches = {"_p_CPfMatches", "CPfMatches *", 0, 0, (void*)&_wrap_class_CPfMatches, 0};
static swig_type_info _swigt__p_CPfTeams = {"_p_CPfTeams", "CPfTeams *", 0, 0, (void*)&_wrap_class_CPfTeams, 0};
static swig_type_info _swigt__p_CSimulationManager = {"_p_CSimulationManager", "CSimulationManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CState = {"_p_CState", "CState *", 0, 0, (void*)&_wrap_class_CState, 0};
static swig_type_info _swigt__p_CStateCredits = {"_p_CStateCredits", "CStateCredits *", 0, 0, (void*)&_wrap_class_CStateCredits, 0};
static swig_type_info _swigt__p_CStateMainMenu = {"_p_CStateMainMenu", "CStateMainMenu *", 0, 0, (void*)&_wrap_class_CStateMainMenu, 0};
static swig_type_info _swigt__p_CStateManager = {"_p_CStateManager", "CStateManager *", 0, 0, (void*)&_wrap_class_CStateManager, 0};
static swig_type_info _swigt__p_CStateMonitor = {"_p_CStateMonitor", "CStateMonitor *", 0, 0, (void*)&_wrap_class_CStateMonitor, 0};
static swig_type_info _swigt__p_IDAOFactory = {"_p_IDAOFactory", "IDAOFactory *", 0, 0, (void*)&_wrap_class_IDAOFactory, 0};
static swig_type_info _swigt__p_IPfGameOptionsDAO = {"_p_IPfGameOptionsDAO", "IPfGameOptionsDAO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IPfGameStatesDAO = {"_p_IPfGameStatesDAO", "IPfGameStatesDAO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IPfGoalsDAO = {"_p_IPfGoalsDAO", "IPfGoalsDAO *", 0, 0, (void*)&_wrap_class_IPfGoalsDAO, 0};
static swig_type_info _swigt__p_IPfMatchesDAO = {"_p_IPfMatchesDAO", "IPfMatchesDAO *", 0, 0, (void*)&_wrap_class_IPfMatchesDAO, 0};
static swig_type_info _swigt__p_IPfTeamsDAO = {"_p_IPfTeamsDAO", "IPfTeamsDAO *", 0, 0, (void*)&_wrap_class_IPfTeamsDAO, 0};
static swig_type_info _swigt__p_Ogre__FrameEvent = {"_p_Ogre__FrameEvent", "Ogre::FrameEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorTCPfGoals_p_t = {"_p_std__vectorTCPfGoals_p_t", "std::vector<CPfGoals * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTCPfMatches_p_t = {"_p_std__vectorTCPfMatches_p_t", "std::vector<CPfMatches * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTCPfTeams_p_t = {"_p_std__vectorTCPfTeams_p_t", "std::vector<CPfTeams * > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CDAOAbstractFactory,
  &_swigt__p_CDate,
  &_swigt__p_CLog,
  &_swigt__p_CPfGoals,
  &_swigt__p_CPfMatches,
  &_swigt__p_CPfTeams,
  &_swigt__p_CSimulationManager,
  &_swigt__p_CState,
  &_swigt__p_CStateCredits,
  &_swigt__p_CStateMainMenu,
  &_swigt__p_CStateManager,
  &_swigt__p_CStateMonitor,
  &_swigt__p_IDAOFactory,
  &_swigt__p_IPfGameOptionsDAO,
  &_swigt__p_IPfGameStatesDAO,
  &_swigt__p_IPfGoalsDAO,
  &_swigt__p_IPfMatchesDAO,
  &_swigt__p_IPfTeamsDAO,
  &_swigt__p_Ogre__FrameEvent,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorTCPfGoals_p_t,
  &_swigt__p_std__vectorTCPfMatches_p_t,
  &_swigt__p_std__vectorTCPfTeams_p_t,
};

static swig_cast_info _swigc__p_CDAOAbstractFactory[] = {  {&_swigt__p_CDAOAbstractFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CDate[] = {  {&_swigt__p_CDate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CLog[] = {  {&_swigt__p_CLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPfGoals[] = {  {&_swigt__p_CPfGoals, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPfMatches[] = {  {&_swigt__p_CPfMatches, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPfTeams[] = {  {&_swigt__p_CPfTeams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSimulationManager[] = {  {&_swigt__p_CSimulationManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CState[] = {  {&_swigt__p_CStateMonitor, _p_CStateMonitorTo_p_CState, 0, 0},  {&_swigt__p_CState, 0, 0, 0},  {&_swigt__p_CStateMainMenu, _p_CStateMainMenuTo_p_CState, 0, 0},  {&_swigt__p_CStateCredits, _p_CStateCreditsTo_p_CState, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CStateCredits[] = {  {&_swigt__p_CStateCredits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CStateMainMenu[] = {  {&_swigt__p_CStateMainMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CStateManager[] = {  {&_swigt__p_CStateManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CStateMonitor[] = {  {&_swigt__p_CStateMonitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDAOFactory[] = {  {&_swigt__p_IDAOFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPfGameOptionsDAO[] = {  {&_swigt__p_IPfGameOptionsDAO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPfGameStatesDAO[] = {  {&_swigt__p_IPfGameStatesDAO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPfGoalsDAO[] = {  {&_swigt__p_IPfGoalsDAO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPfMatchesDAO[] = {  {&_swigt__p_IPfMatchesDAO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPfTeamsDAO[] = {  {&_swigt__p_IPfTeamsDAO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__FrameEvent[] = {  {&_swigt__p_Ogre__FrameEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTCPfGoals_p_t[] = {  {&_swigt__p_std__vectorTCPfGoals_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTCPfMatches_p_t[] = {  {&_swigt__p_std__vectorTCPfMatches_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTCPfTeams_p_t[] = {  {&_swigt__p_std__vectorTCPfTeams_p_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CDAOAbstractFactory,
  _swigc__p_CDate,
  _swigc__p_CLog,
  _swigc__p_CPfGoals,
  _swigc__p_CPfMatches,
  _swigc__p_CPfTeams,
  _swigc__p_CSimulationManager,
  _swigc__p_CState,
  _swigc__p_CStateCredits,
  _swigc__p_CStateMainMenu,
  _swigc__p_CStateManager,
  _swigc__p_CStateMonitor,
  _swigc__p_IDAOFactory,
  _swigc__p_IPfGameOptionsDAO,
  _swigc__p_IPfGameStatesDAO,
  _swigc__p_IPfGoalsDAO,
  _swigc__p_IPfMatchesDAO,
  _swigc__p_IPfTeamsDAO,
  _swigc__p_Ogre__FrameEvent,
  _swigc__p_std__string,
  _swigc__p_std__vectorTCPfGoals_p_t,
  _swigc__p_std__vectorTCPfMatches_p_t,
  _swigc__p_std__vectorTCPfTeams_p_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
#ifdef __cplusplus
extern "C" {
#endif
void SWIG_init_user(lua_State* L );

/* this is the initialization function
	added at the very end of the code
	the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
	int i;

	/* start with global table */
	lua_pushvalue(L,LUA_GLOBALSINDEX);

	SWIG_InitializeModule((void*)L);
	SWIG_PropagateClientData();

	/* invoke user-specific initialization */
	SWIG_init_user(L);

	/* add a global fn */
	SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
	SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);

	/* begin the module (its a table with the same name as the module) */
	SWIG_Lua_module_begin(L,SWIG_name);
	/* add commands/functions */
	for (i = 0; swig_commands[i].name; i++){
		SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
	}
	/*luaL_openlib(L,NULL,swig_commands,0);*/
	/* all in one */
	/*luaL_openlib(L,SWIG_name,swig_commands,0);*/
	/* add variables */
	for (i = 0; swig_variables[i].name; i++){
		SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
	}

	/* additional registration structs & classes in lua: */
	for (i = 0; swig_types[i]; i++){
		if (swig_types[i]->clientdata){
			SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
		}
	}

	/* constants */
	SWIG_Lua_InstallConstants(L,swig_constants);

	/* end module */
	/*SWIG_Lua_module_end(L);*/
	lua_pop(L,1);  /* tidy stack (remove module table)*/
	lua_pop(L,1);  /* tidy stack (remove global table)*/

	return 1;
}

/* Lua 5.1 has a different name for importing libraries
luaopen_XXX, where XXX is the name of the module (not capitalised)
this function will allow Lua 5.1 to import correctly.
There is a #define in the wrapper to rename 'SWIG_import' to the correct name
*/

SWIGEXPORT int SWIG_import(lua_State* L)
{
	return SWIG_init(L);
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C"
#endif
void SWIG_init_user(lua_State* L)
{
  
}

