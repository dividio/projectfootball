/******************************************************************************
* Copyright (C) 2010 - Ikaro Games   www.ikarogames.com                       *
*                                                                             *
* This program is free software; you can redistribute it and/or               *
* modify it under the terms of the GNU General Public License                 *
* as published by the Free Software Foundation; either version 2              *
* of the License, or (at your option) any later version.                      *
*                                                                             *
* This program is distributed in the hope that it will be useful,             *
* but WITHOUT ANY WARRANTY; without even the implied warranty of              *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
* GNU General Public License for more details.                                *
*                                                                             *
* You should have received a copy of the GNU General Public License           *
* along with this program; if not, write to the Free Software                 *
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. *
*                                                                             *
*                                                                             *
*       generated by dia/DAOcodegen.py                                        *
*       Version: 1.23                                                         *
******************************************************************************/

#include <iostream>
#include <sstream>

#include "CPfPhaseRoundsDAOSQLite.h"

CPfPhaseRoundsDAOSQLite::CPfPhaseRoundsDAOSQLite(sqlite3 *database)
  : CPfPhaseRoundsDAOSQLiteEntity(database)
{
}

CPfPhaseRoundsDAOSQLite::~CPfPhaseRoundsDAOSQLite()
{
}

std::vector<CPfPhaseRounds*>* CPfPhaseRoundsDAOSQLite::findByXFkCompetitionPhase(int XFkCompetitionPhase)
{
    std::ostringstream stream;
    stream << XFkCompetitionPhase;
    return findByXFkCompetitionPhase(stream.str());
}

std::vector<CPfPhaseRounds*>* CPfPhaseRoundsDAOSQLite::findByXFkCompetitionPhase(const std::string &XFkCompetitionPhase)
{
    std::string sql("SELECT * FROM PF_PHASE_ROUNDS WHERE ");
    sql = sql+"X_FK_COMPETITION_PHASE='"+XFkCompetitionPhase+"' ORDER BY N_ORDER";
    return loadVector(sql);
}

CPfPhaseRounds* CPfPhaseRoundsDAOSQLite::findByXPhaseRound(int XPhaseRound)
{
    std::ostringstream stream;
    stream << XPhaseRound;
    return findByXPhaseRound(stream.str());
}

CPfPhaseRounds* CPfPhaseRoundsDAOSQLite::findByXPhaseRound(const std::string &XPhaseRound)
{
    std::string sql("SELECT * FROM PF_PHASE_ROUNDS WHERE ");
    sql = sql+"X_PHASE_ROUND='"+XPhaseRound+"'";
    return loadRegister(sql);
}

std::vector<CPfPhaseRounds*>* CPfPhaseRoundsDAOSQLite::findByXFkCompetition(int XFkCompetition)
{
    std::ostringstream stream;
    stream << XFkCompetition;
    return findByXFkCompetition(stream.str());
}

std::vector<CPfPhaseRounds*>* CPfPhaseRoundsDAOSQLite::findByXFkCompetition(const std::string &XFkCompetition)
{
	std::string sql("SELECT PR.* FROM PF_PHASE_ROUNDS PR ");
    sql = sql +		"JOIN PF_COMPETITION_PHASES PH ON PH.X_COMPETITION_PHASE = PR.X_FK_COMPETITION_PHASE "
                    "WHERE PH.X_FK_COMPETITION = '"+XFkCompetition+"' "
                    "ORDER BY PH.N_ORDER, PR.N_ORDER";
    return loadVector(sql);
}

CPfPhaseRounds* CPfPhaseRoundsDAOSQLite::findLastPhaseRound(int XFkCompetition, int XSeason)
{
    std::ostringstream stream;
    stream << XFkCompetition;
    std::ostringstream stream2;
    stream2 << XSeason;
    return findLastPhaseRound(stream.str(), stream2.str());
}

CPfPhaseRounds* CPfPhaseRoundsDAOSQLite::findLastPhaseRound(const std::string &XFkCompetition, const std::string &XSeason)
{
	std::string sql("SELECT PR.* FROM PF_PHASE_ROUNDS PR ");
    sql = sql +		"JOIN PF_COMPETITION_PHASES PH ON PH.X_COMPETITION_PHASE = PR.X_FK_COMPETITION_PHASE "
    				"JOIN PF_MATCHES M ON PR.X_PHASE_ROUND = M.X_FK_PHASE_ROUND "
                    "AND M.X_FK_SEASON = '" + XSeason + "' AND M.L_PLAYED = 'Y' "
                    "WHERE PH.X_FK_COMPETITION = '"+XFkCompetition+"' "
                    "ORDER BY M.D_MATCH DESC";
    std::cout << sql << std::endl;
    return loadRegister(sql);
}
