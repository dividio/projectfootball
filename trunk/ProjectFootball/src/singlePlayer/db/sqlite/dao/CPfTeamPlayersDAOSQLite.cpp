/******************************************************************************
* Copyright (C) 2009 - Ikaro Games   www.ikarogames.com                       *
*                                                                             *
* This program is free software; you can redistribute it and/or               *
* modify it under the terms of the GNU General Public License                 *
* as published by the Free Software Foundation; either version 2              *
* of the License, or (at your option) any later version.                      *
*                                                                             *
* This program is distributed in the hope that it will be useful,             *
* but WITHOUT ANY WARRANTY; without even the implied warranty of              *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
* GNU General Public License for more details.                                *
*                                                                             *
* You should have received a copy of the GNU General Public License           *
* along with this program; if not, write to the Free Software                 *
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. *
*                                                                             *
*                                                                             *
*       generated by dia/DAOcodegen.py                                        *
*       Version: 1.23                                                         *
******************************************************************************/

#include <iostream>
#include <sstream>

#include "CPfTeamPlayersDAOSQLite.h"

CPfTeamPlayersDAOSQLite::CPfTeamPlayersDAOSQLite(sqlite3 *database)
  : CPfTeamPlayersDAOSQLiteEntity(database)
{
}

CPfTeamPlayersDAOSQLite::~CPfTeamPlayersDAOSQLite()
{
}

CPfTeamPlayers* CPfTeamPlayersDAOSQLite::findByXFkRoleSelected(int XFkRoleSelected)
{
    std::ostringstream stream;
    stream << XFkRoleSelected;
    return findByXFkRoleSelected(stream.str());
}

CPfTeamPlayers* CPfTeamPlayersDAOSQLite::findByXFkRoleSelected(const std::string &XFkRoleSelected)
{
    std::string sql("SELECT * FROM PF_TEAM_PLAYERS WHERE ");
    sql = sql+"X_FK_ROLE_SELECTED='"+XFkRoleSelected+"'";
    return loadRegister(sql);
}

CPfTeamPlayers* CPfTeamPlayersDAOSQLite::findByXTeamPlayer(int XTeamPlayer)
{
    std::ostringstream stream;
    stream << XTeamPlayer;
    return findByXTeamPlayer(stream.str());
}

CPfTeamPlayers* CPfTeamPlayersDAOSQLite::findByXTeamPlayer(const std::string &XTeamPlayer)
{
    std::string sql("SELECT * FROM PF_TEAM_PLAYERS WHERE ");
    sql = sql+"X_TEAM_PLAYER='"+XTeamPlayer+"'";
    return loadRegister(sql);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findActiveByXFkTeam(int XFkTeam, const std::string &timestamp)
{
    std::ostringstream stream;
    stream << XFkTeam;
    return findActiveByXFkTeam(stream.str(), timestamp);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findActiveByXFkTeam(const std::string &XFkTeam, const std::string &timestamp)
{
    std::string sql("SELECT TP.* "
                    "FROM PF_TEAM_PLAYERS TP "
                    "  JOIN PF_TEAM_PLAYER_CONTRACTS TPC ON TPC.X_FK_TEAM_PLAYER=TP.X_TEAM_PLAYER "
                    "  JOIN PF_TEAMS T ON T.X_TEAM=TPC.X_FK_TEAM ");
    sql +=          "WHERE X_TEAM='"+XFkTeam+"' "
                    "  AND D_BEGIN<='" + timestamp + "' "
                    "  AND (D_END IS NULL OR D_END>'" + timestamp + "')";
    return loadVector(sql);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findLineUpByXFkTeam(int XFkTeam, const std::string &timestamp)
{
    std::ostringstream stream;
    stream << XFkTeam;
    return findLineUpByXFkTeam(stream.str(), timestamp);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findLineUpByXFkTeam(const std::string &XFkTeam, const std::string &timestamp)
{
    std::string sql("SELECT TP.* "
                    "FROM PF_TEAM_PLAYERS TP "
                    "  JOIN PF_TEAM_PLAYER_CONTRACTS TPC ON TPC.X_FK_TEAM_PLAYER=TP.X_TEAM_PLAYER "
                    "  JOIN PF_TEAMS T ON T.X_TEAM=TPC.X_FK_TEAM ");
    sql +=          "WHERE X_TEAM='"+XFkTeam+"' "
                    "  AND D_BEGIN<='" + timestamp + "' "
                    "  AND (D_END IS NULL OR D_END>'" + timestamp + "') "
                    "  AND N_LINEUP_ORDER>=1 AND N_LINEUP_ORDER<=11 "
                    "ORDER BY N_LINEUP_ORDER";
    return loadVector(sql);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findAlternateByXFkTeam(int XFkTeam, const std::string &timestamp)
{
    std::ostringstream stream;
    stream << XFkTeam;
    return findAlternateByXFkTeam(stream.str(), timestamp);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findAlternateByXFkTeam(const std::string &XFkTeam, const std::string &timestamp)
{
    std::string sql("SELECT TP.* "
                    "FROM PF_TEAM_PLAYERS TP "
                    "  JOIN PF_TEAM_PLAYER_CONTRACTS TPC ON TPC.X_FK_TEAM_PLAYER=TP.X_TEAM_PLAYER "
                    "  JOIN PF_TEAMS T ON T.X_TEAM=TPC.X_FK_TEAM ");
    sql +=          "WHERE X_TEAM='"+XFkTeam+"' "
                    "  AND D_BEGIN<='" + timestamp + "' "
                    "  AND (D_END IS NULL OR D_END>'" + timestamp + "') "
                    "  AND N_LINEUP_ORDER>11 AND N_LINEUP_ORDER<=17 "
                    "ORDER BY N_LINEUP_ORDER";
    return loadVector(sql);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findNotLineUpByXFkTeam(int XFkTeam, const std::string &timestamp)
{
    std::ostringstream stream;
    stream << XFkTeam;
    return findNotLineUpByXFkTeam(stream.str(), timestamp);
}

std::vector<CPfTeamPlayers*>* CPfTeamPlayersDAOSQLite::findNotLineUpByXFkTeam(const std::string &XFkTeam, const std::string &timestamp)
{
    std::string sql("SELECT TP.* "
                    "FROM PF_TEAM_PLAYERS TP "
                    "  JOIN PF_TEAM_PLAYER_CONTRACTS TPC ON TPC.X_FK_TEAM_PLAYER=TP.X_TEAM_PLAYER "
                    "  JOIN PF_TEAMS T ON T.X_TEAM=TPC.X_FK_TEAM ");
    sql +=          "WHERE X_TEAM='"+XFkTeam+"' "
                    "  AND D_BEGIN<='" + timestamp + "' "
                    "  AND (D_END IS NULL OR D_END>'" + timestamp + "') "
                    "  AND (N_LINEUP_ORDER>17 OR N_LINEUP_ORDER IS NULL) "
                    "ORDER BY N_LINEUP_ORDER";
    return loadVector(sql);
}

CPfTeamPlayers* CPfTeamPlayersDAOSQLite::findByXFkCountry(int XFkCountry)
{
    std::ostringstream stream;
    stream << XFkCountry;
    return findByXFkCountry(stream.str());
}

CPfTeamPlayers* CPfTeamPlayersDAOSQLite::findByXFkCountry(const std::string &XFkCountry)
{
    std::string sql("SELECT * FROM PF_TEAM_PLAYERS WHERE ");
    sql = sql+"X_FK_COUNTRY='"+XFkCountry+"'";
    return loadRegister(sql);
}
