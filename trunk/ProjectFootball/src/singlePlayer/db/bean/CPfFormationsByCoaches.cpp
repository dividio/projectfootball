/******************************************************************************
* Copyright (C) 2009 - Ikaro Games   www.ikarogames.com                       *
*                                                                             *
* This program is free software; you can redistribute it and/or               *
* modify it under the terms of the GNU General Public License                 *
* as published by the Free Software Foundation; either version 2              *
* of the License, or (at your option) any later version.                      *
*                                                                             *
* This program is distributed in the hope that it will be useful,             *
* but WITHOUT ANY WARRANTY; without even the implied warranty of              *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
* GNU General Public License for more details.                                *
*                                                                             *
* You should have received a copy of the GNU General Public License           *
* along with this program; if not, write to the Free Software                 *
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. *
*                                                                             *
*                                                                             *
*       generated by dia/DAOcodegen.py                                        *
*       Version: 1.23                                                         *
******************************************************************************/

#include <iostream>
#include <sstream>
#include <stdlib.h>

#include "CPfFormationsByCoaches.h"

CPfFormationsByCoaches::CPfFormationsByCoaches()
{
    m_XFkFormation = "0";
    m_NSkill = "0";
    m_XFkCoach = "0";
    m_XFormationByCoach = "0";
}

CPfFormationsByCoaches::CPfFormationsByCoaches(const CPfFormationsByCoaches &obj)
{
    m_XFkFormation = obj.m_XFkFormation;
    m_NSkill = obj.m_NSkill;
    m_XFkCoach = obj.m_XFkCoach;
    m_XFormationByCoach = obj.m_XFormationByCoach;
}

CPfFormationsByCoaches::~CPfFormationsByCoaches()
{
}

int CPfFormationsByCoaches::getXFkFormation() const
{
    if( m_XFkFormation=="" ){
        return 0;
    }else{
        return atoi(m_XFkFormation.c_str());
    }
}

const std::string& CPfFormationsByCoaches::getXFkFormation_str() const
{
    return m_XFkFormation;
}

int CPfFormationsByCoaches::getNSkill() const
{
    if( m_NSkill=="" ){
        return 0;
    }else{
        return atoi(m_NSkill.c_str());
    }
}

const std::string& CPfFormationsByCoaches::getNSkill_str() const
{
    return m_NSkill;
}

int CPfFormationsByCoaches::getXFkCoach() const
{
    if( m_XFkCoach=="" ){
        return 0;
    }else{
        return atoi(m_XFkCoach.c_str());
    }
}

const std::string& CPfFormationsByCoaches::getXFkCoach_str() const
{
    return m_XFkCoach;
}

int CPfFormationsByCoaches::getXFormationByCoach() const
{
    if( m_XFormationByCoach=="" ){
        return 0;
    }else{
        return atoi(m_XFormationByCoach.c_str());
    }
}

const std::string& CPfFormationsByCoaches::getXFormationByCoach_str() const
{
    return m_XFormationByCoach;
}

void CPfFormationsByCoaches::setXFkFormation(int XFkFormation)
{
    std::ostringstream stream;
    stream << XFkFormation;
    m_XFkFormation = stream.str();
}

void CPfFormationsByCoaches::setXFkFormation_str(const std::string &XFkFormation)
{
    m_XFkFormation = XFkFormation;
}

void CPfFormationsByCoaches::setNSkill(int NSkill)
{
    std::ostringstream stream;
    stream << NSkill;
    m_NSkill = stream.str();
}

void CPfFormationsByCoaches::setNSkill_str(const std::string &NSkill)
{
    m_NSkill = NSkill;
}

void CPfFormationsByCoaches::setXFkCoach(int XFkCoach)
{
    std::ostringstream stream;
    stream << XFkCoach;
    m_XFkCoach = stream.str();
}

void CPfFormationsByCoaches::setXFkCoach_str(const std::string &XFkCoach)
{
    m_XFkCoach = XFkCoach;
}

void CPfFormationsByCoaches::setXFormationByCoach(int XFormationByCoach)
{
    std::ostringstream stream;
    stream << XFormationByCoach;
    m_XFormationByCoach = stream.str();
}

void CPfFormationsByCoaches::setXFormationByCoach_str(const std::string &XFormationByCoach)
{
    m_XFormationByCoach = XFormationByCoach;
}

