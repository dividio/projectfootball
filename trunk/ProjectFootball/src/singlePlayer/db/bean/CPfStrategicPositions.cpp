/******************************************************************************
* Copyright (C) 2010 - Ikaro Games   www.ikarogames.com                       *
*                                                                             *
* This program is free software; you can redistribute it and/or               *
* modify it under the terms of the GNU General Public License                 *
* as published by the Free Software Foundation; either version 2              *
* of the License, or (at your option) any later version.                      *
*                                                                             *
* This program is distributed in the hope that it will be useful,             *
* but WITHOUT ANY WARRANTY; without even the implied warranty of              *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
* GNU General Public License for more details.                                *
*                                                                             *
* You should have received a copy of the GNU General Public License           *
* along with this program; if not, write to the Free Software                 *
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. *
*                                                                             *
*                                                                             *
*       generated by dia/DAOcodegen.py                                        *
*       Version: 1.23                                                         *
******************************************************************************/

#include <iostream>
#include <sstream>
#include <stdlib.h>

#include "CPfStrategicPositions.h"

CPfStrategicPositions::CPfStrategicPositions()
{
    m_NLineupOrder = "0";
    m_XFkFormation = "0";
    m_NTopLeftArea = "0";
    m_XFkRole = "0";
    m_NOffensivePosX = "0";
    m_NBottomRightArea = "0";
    m_NOffensivePosZ = "0";
    m_XStrategicPosition = "0";
    m_NDefensivePosZ = "0";
    m_NDefensivePosX = "0";
    m_NInitialPosZ = "0";
    m_NInitialPosX = "0";
}

CPfStrategicPositions::CPfStrategicPositions(const CPfStrategicPositions &obj)
{
    m_NLineupOrder = obj.m_NLineupOrder;
    m_XFkFormation = obj.m_XFkFormation;
    m_NTopLeftArea = obj.m_NTopLeftArea;
    m_XFkRole = obj.m_XFkRole;
    m_NOffensivePosX = obj.m_NOffensivePosX;
    m_NBottomRightArea = obj.m_NBottomRightArea;
    m_NOffensivePosZ = obj.m_NOffensivePosZ;
    m_XStrategicPosition = obj.m_XStrategicPosition;
    m_NDefensivePosZ = obj.m_NDefensivePosZ;
    m_NDefensivePosX = obj.m_NDefensivePosX;
    m_NInitialPosZ = obj.m_NInitialPosZ;
    m_NInitialPosX = obj.m_NInitialPosX;
}

CPfStrategicPositions::~CPfStrategicPositions()
{
}

int CPfStrategicPositions::getNLineupOrder() const
{
    if( m_NLineupOrder=="" ){
        return 0;
    }else{
        return atoi(m_NLineupOrder.c_str());
    }
}

const std::string& CPfStrategicPositions::getNLineupOrder_str() const
{
    return m_NLineupOrder;
}

int CPfStrategicPositions::getXFkFormation() const
{
    if( m_XFkFormation=="" ){
        return 0;
    }else{
        return atoi(m_XFkFormation.c_str());
    }
}

const std::string& CPfStrategicPositions::getXFkFormation_str() const
{
    return m_XFkFormation;
}

int CPfStrategicPositions::getNTopLeftArea() const
{
    if( m_NTopLeftArea=="" ){
        return 0;
    }else{
        return atoi(m_NTopLeftArea.c_str());
    }
}

const std::string& CPfStrategicPositions::getNTopLeftArea_str() const
{
    return m_NTopLeftArea;
}

int CPfStrategicPositions::getXFkRole() const
{
    if( m_XFkRole=="" ){
        return 0;
    }else{
        return atoi(m_XFkRole.c_str());
    }
}

const std::string& CPfStrategicPositions::getXFkRole_str() const
{
    return m_XFkRole;
}

int CPfStrategicPositions::getNOffensivePosX() const
{
    if( m_NOffensivePosX=="" ){
        return 0;
    }else{
        return atoi(m_NOffensivePosX.c_str());
    }
}

const std::string& CPfStrategicPositions::getNOffensivePosX_str() const
{
    return m_NOffensivePosX;
}

int CPfStrategicPositions::getNBottomRightArea() const
{
    if( m_NBottomRightArea=="" ){
        return 0;
    }else{
        return atoi(m_NBottomRightArea.c_str());
    }
}

const std::string& CPfStrategicPositions::getNBottomRightArea_str() const
{
    return m_NBottomRightArea;
}

int CPfStrategicPositions::getNOffensivePosZ() const
{
    if( m_NOffensivePosZ=="" ){
        return 0;
    }else{
        return atoi(m_NOffensivePosZ.c_str());
    }
}

const std::string& CPfStrategicPositions::getNOffensivePosZ_str() const
{
    return m_NOffensivePosZ;
}

int CPfStrategicPositions::getXStrategicPosition() const
{
    if( m_XStrategicPosition=="" ){
        return 0;
    }else{
        return atoi(m_XStrategicPosition.c_str());
    }
}

const std::string& CPfStrategicPositions::getXStrategicPosition_str() const
{
    return m_XStrategicPosition;
}

int CPfStrategicPositions::getNDefensivePosZ() const
{
    if( m_NDefensivePosZ=="" ){
        return 0;
    }else{
        return atoi(m_NDefensivePosZ.c_str());
    }
}

const std::string& CPfStrategicPositions::getNDefensivePosZ_str() const
{
    return m_NDefensivePosZ;
}

int CPfStrategicPositions::getNDefensivePosX() const
{
    if( m_NDefensivePosX=="" ){
        return 0;
    }else{
        return atoi(m_NDefensivePosX.c_str());
    }
}

const std::string& CPfStrategicPositions::getNDefensivePosX_str() const
{
    return m_NDefensivePosX;
}

int CPfStrategicPositions::getNInitialPosZ() const
{
    if( m_NInitialPosZ=="" ){
        return 0;
    }else{
        return atoi(m_NInitialPosZ.c_str());
    }
}

const std::string& CPfStrategicPositions::getNInitialPosZ_str() const
{
    return m_NInitialPosZ;
}

int CPfStrategicPositions::getNInitialPosX() const
{
    if( m_NInitialPosX=="" ){
        return 0;
    }else{
        return atoi(m_NInitialPosX.c_str());
    }
}

const std::string& CPfStrategicPositions::getNInitialPosX_str() const
{
    return m_NInitialPosX;
}

void CPfStrategicPositions::setNLineupOrder(int NLineupOrder)
{
    std::ostringstream stream;
    stream << NLineupOrder;
    m_NLineupOrder = stream.str();
}

void CPfStrategicPositions::setNLineupOrder_str(const std::string &NLineupOrder)
{
    m_NLineupOrder = NLineupOrder;
}

void CPfStrategicPositions::setXFkFormation(int XFkFormation)
{
    std::ostringstream stream;
    stream << XFkFormation;
    m_XFkFormation = stream.str();
}

void CPfStrategicPositions::setXFkFormation_str(const std::string &XFkFormation)
{
    m_XFkFormation = XFkFormation;
}

void CPfStrategicPositions::setNTopLeftArea(int NTopLeftArea)
{
    std::ostringstream stream;
    stream << NTopLeftArea;
    m_NTopLeftArea = stream.str();
}

void CPfStrategicPositions::setNTopLeftArea_str(const std::string &NTopLeftArea)
{
    m_NTopLeftArea = NTopLeftArea;
}

void CPfStrategicPositions::setXFkRole(int XFkRole)
{
    std::ostringstream stream;
    stream << XFkRole;
    m_XFkRole = stream.str();
}

void CPfStrategicPositions::setXFkRole_str(const std::string &XFkRole)
{
    m_XFkRole = XFkRole;
}

void CPfStrategicPositions::setNOffensivePosX(int NOffensivePosX)
{
    std::ostringstream stream;
    stream << NOffensivePosX;
    m_NOffensivePosX = stream.str();
}

void CPfStrategicPositions::setNOffensivePosX_str(const std::string &NOffensivePosX)
{
    m_NOffensivePosX = NOffensivePosX;
}

void CPfStrategicPositions::setNBottomRightArea(int NBottomRightArea)
{
    std::ostringstream stream;
    stream << NBottomRightArea;
    m_NBottomRightArea = stream.str();
}

void CPfStrategicPositions::setNBottomRightArea_str(const std::string &NBottomRightArea)
{
    m_NBottomRightArea = NBottomRightArea;
}

void CPfStrategicPositions::setNOffensivePosZ(int NOffensivePosZ)
{
    std::ostringstream stream;
    stream << NOffensivePosZ;
    m_NOffensivePosZ = stream.str();
}

void CPfStrategicPositions::setNOffensivePosZ_str(const std::string &NOffensivePosZ)
{
    m_NOffensivePosZ = NOffensivePosZ;
}

void CPfStrategicPositions::setXStrategicPosition(int XStrategicPosition)
{
    std::ostringstream stream;
    stream << XStrategicPosition;
    m_XStrategicPosition = stream.str();
}

void CPfStrategicPositions::setXStrategicPosition_str(const std::string &XStrategicPosition)
{
    m_XStrategicPosition = XStrategicPosition;
}

void CPfStrategicPositions::setNDefensivePosZ(int NDefensivePosZ)
{
    std::ostringstream stream;
    stream << NDefensivePosZ;
    m_NDefensivePosZ = stream.str();
}

void CPfStrategicPositions::setNDefensivePosZ_str(const std::string &NDefensivePosZ)
{
    m_NDefensivePosZ = NDefensivePosZ;
}

void CPfStrategicPositions::setNDefensivePosX(int NDefensivePosX)
{
    std::ostringstream stream;
    stream << NDefensivePosX;
    m_NDefensivePosX = stream.str();
}

void CPfStrategicPositions::setNDefensivePosX_str(const std::string &NDefensivePosX)
{
    m_NDefensivePosX = NDefensivePosX;
}

void CPfStrategicPositions::setNInitialPosZ(int NInitialPosZ)
{
    std::ostringstream stream;
    stream << NInitialPosZ;
    m_NInitialPosZ = stream.str();
}

void CPfStrategicPositions::setNInitialPosZ_str(const std::string &NInitialPosZ)
{
    m_NInitialPosZ = NInitialPosZ;
}

void CPfStrategicPositions::setNInitialPosX(int NInitialPosX)
{
    std::ostringstream stream;
    stream << NInitialPosX;
    m_NInitialPosX = stream.str();
}

void CPfStrategicPositions::setNInitialPosX_str(const std::string &NInitialPosX)
{
    m_NInitialPosX = NInitialPosX;
}

